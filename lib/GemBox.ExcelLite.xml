<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GemBox.ExcelLite</name>
    </assembly>
    <members>
        <member name="T:GemBox.ExcelLite.FunctionFormulaToken">
            <summary>
            Formula token for holding function.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaToken">
            <summary>
            Base formula token class for inheritance
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to bytes representation.
            </summary>
            <returns>bytes representation of the formula token</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaToken.Token">
            <summary>
            Gets the formula token code.
            </summary>
            <value>The formula token code.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaToken.Size">
            <summary>
            Gets the size of the formula token.
            </summary>
            <value>The size of the formula token.</value>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FunctionFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.ArrayFormulaToken">
            <summary>
            Formula token for holding array.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ArrayFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.ArrayFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ArrayFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.ArrayFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.ArrayFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.NumbersParser">
            <summary>
            Class used for controling number format
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.NumbersParser.formatProvider">
            <summary>
            Number format for string conversion
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NumbersParser.#cctor">
            <summary>
            Initialize object
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NumbersParser.IsUshort(System.Double)">
            <summary>
            Determines whether the specified double value is ushort( integer ).
            </summary>
            <param name="doubleValue">The double value.</param>
            <returns>
            	<c>true</c> if the specified double value is ushort; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.ExcelLite.NumbersParser.StrToFloat(System.String)">
            <summary>
            Converts string to float.
            </summary>
            <param name="str">strind data.</param>
            <returns>flot data.</returns>
        </member>
        <member name="M:GemBox.ExcelLite.NumbersParser.StrToInt(System.String)">
            <summary>
            Converts string to int.
            </summary>
            <param name="data">string data.</param>
            <returns>int data.</returns>
        </member>
        <member name="M:GemBox.ExcelLite.NumbersParser.StrToDouble(System.String)">
            <summary>
            Convert string to double.
            </summary>
            <param name="data">string data.</param>
            <returns>double data.</returns>
        </member>
        <member name="P:GemBox.ExcelLite.NumbersParser.Provider">
            <summary>
            Get number format info instance
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.NameRecord">
            <summary>
            Name record for holding information about name which can be used in named cell\range
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NameRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.ExcelLite.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NameRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary readed to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NameRecord.#ctor(GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NameRecord"/> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NameRecord.ConvertNameRecordRangeToRpnBytes(GemBox.ExcelLite.CellRange,System.String,GemBox.ExcelLite.ExcelWorksheetCollection)">
            <summary>
            Converts the name record range to RPN bytes.
            </summary>
            <param name="range">The range to be converted.</param>
            <param name="sheetName">Sheet' name.</param>
            <param name="worksheets">The worksheets collection.</param>		
        </member>
        <member name="P:GemBox.ExcelLite.NameRecord.NameValue">
            <summary>
            Gets or sets the name value.
            </summary>
            <value>The name value.</value>
        </member>
        <member name="P:GemBox.ExcelLite.NameRecord.SheetIndex">
            <summary>
            Gets or sets the index for the sheet which contain named cell\range.
            </summary>
            <value>The index for the sheet which contain named cell\range.</value>
        </member>
        <member name="P:GemBox.ExcelLite.NameRecord.Worksheets">
            <summary>
            Gets or sets the workbook\worksheets collection.
            </summary>
            <value>The workbook\worksheets collection.</value>
        </member>
        <member name="P:GemBox.ExcelLite.NameRecord.Range">
            <summary>
            Gets or sets the range to be associated with the user-defined name.
            </summary>
            <value>The range to be associated with the user-defined name.</value>
        </member>
        <member name="P:GemBox.ExcelLite.NameRecord.RpnBytes">
            <summary>
            Gets or sets the RPN bytes of formula used for referencing 3d cell or area.
            </summary>
            <value>The RPN bytes of formula used for referencing 3d cell or area.</value>
        </member>
        <member name="T:GemBox.ExcelLite.RefFormulaToken">
            <summary>
            Formula token for holding reference.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RefFormulaToken.ColumnBitMask">
            <summary>
            Bit mask for column options.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RefFormulaToken.RowBitMask">
            <summary>
            Bit mask for row options.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RefFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RefFormulaToken.IsColumnRegex">
            <summary>
            Regular expression used to determinate whether the input string is column or not
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RefFormulaToken.IsCellRegex">
            <summary>
            Regular expression used to determinate whether the input string is cell or not
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RefFormulaToken.AbsoluteCellMark">
            <summary>
            Absolute preffix row\height symbol
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.RefFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.RefFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.RefFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.RefFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.RefFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.RefFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.Ref3dFormulaToken">
            <summary>
            Formula token for holding 3d reference on internal cell.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Ref3dFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Ref3dFormulaToken.IsCell3DRegex">
            <summary>
            Regular expression used to determinate whether the input string is 3d cell or not
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Ref3dFormulaToken.refIndex">
            <summary>
            REF entry' index on EXTERNSHEET record( see the Link Table ).
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.Ref3dFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.Ref3dFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.Ref3dFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.Ref3dFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.Ref3dFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Ref3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.StrFormulaToken">
            <summary>
            Formula token for holding string.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.StrFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.StrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.StrFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.StrFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.StrFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.StrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelCell">
            <summary>
            Excel cell provides access to a single worksheet cell or to a merged range if the cell is merged.
            </summary>
            <remarks>
            <p>Merged range is created by using <see cref="P:GemBox.ExcelLite.CellRange.Merged">CellRange.Merged</see> property. 
            See the property documentation for more information on merging.</p>
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.MergedRange"/>
        </member>
        <member name="T:GemBox.ExcelLite.AbstractRange">
            <summary>
            Base class for classes representing one or more excel cells.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.AbstractRange.#ctor(GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:GemBox.ExcelLite.AbstractRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">
            <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
        </member>
        <member name="P:GemBox.ExcelLite.AbstractRange.Formula">
            <summary>
            Gets or sets formula string.
            </summary>		
        </member>
        <member name="P:GemBox.ExcelLite.AbstractRange.Value">
            <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.AbstractRange.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see>) on one or more excel cells.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.AbstractRange.IsStyleDefault">
            <summary>
            Returns <b>true</b> if all cells in <see cref="T:GemBox.ExcelLite.AbstractRange">AbstractRange</see> have default 
            cell style; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelCell.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">
            <summary>
            Sets borders on this cell or on merged range if this cell is merged.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.MergedRange"/>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelCell.ConvertExcelNumberToDateTime(System.Double)">
            <summary>
            Converts Excel floating-point number to <see cref="T:System.DateTime">DateTime</see> structure.
            </summary>
            <remarks>
            <p>
            Excel file format doesn't have a separate data type for date and time. 
            <see cref="T:System.DateTime">DateTime</see> value is
            stored as IEEE number encoded in a special way. When reading Excel file, 
            <see cref="P:GemBox.ExcelLite.CellStyle.NumberFormat">CellStyle.NumberFormat</see> is examined and if it matches 
            some of date/time number formats cell value is interpreted as <see cref="T:System.DateTime">DateTime</see>.</p>
            <p>However, if some non-standard date/time number format is used, cell value will not be recognized 
            as <see cref="T:System.DateTime">DateTime</see> but as ordinary number. In such cases (when you know that
            specific cell holds <see cref="T:System.DateTime">DateTime</see> value but you get a number when reading
            Excel file) use this method to convert IEEE number to <see cref="T:System.DateTime">DateTime</see> 
            structure.</p>
            </remarks>
            <param name="num">Excel floating-point number.</param>
            <returns>Converted DateTime structure.</returns>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelCell.Value">
            <summary>
            Gets or sets value of this cell or of merged range if this cell is merged.
            </summary>
            <remarks>
            <p>Exception is thrown if value for the set is not of supported type (See 
            <see cref="M:GemBox.ExcelLite.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</see> for details).</p>
            <p>Note that the fact some type is supported doesn't mean it is written to Excel file in the native format. As
            Microsoft Excel has just few basic types, the object of supported type will be converted to a similar excel type. 
            If similar excel type doesn't exist, value is written as a string value.</p>
            <p>If the value of this property is of <see cref="T:System.DateTime">DateTime</see> type and 
            <see cref="P:GemBox.ExcelLite.ExcelCell.Style">Style</see> number format is not set, ISO date/time 
            format will be used as <see cref="P:GemBox.ExcelLite.CellStyle.NumberFormat">CellStyle.NumberFormat</see> 
            value.</p>
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown for unsupported types.</exception>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.MergedRange"/>
            <seealso cref="M:GemBox.ExcelLite.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</seealso>
            <seealso cref="P:GemBox.ExcelLite.CellStyle.NumberFormat">CellStyle.NumberFormat</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelCell.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see>) of this cell or 
            of merged range if this cell is merged.
            </summary>
            <remarks>
            Unset style properties will be inherited from corresponding row or column. See
            <see cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</see>
            for more details.
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.MergedRange"/>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelCell.IsStyleDefault">
            <summary>
            Returns <b>true</b> if style is default; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelCell.MergedRange">
            <summary>
            Returns associated merged range if the cell is merged; otherwise, <b>null</b>.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged">CellRange.Merged</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelCell.Formula">
            <summary>
            Gets or sets cell formula string.
            </summary>
            <remarks>
            <p>ExcelLite can read and write formulas, but can not calculate formula results. When you open a XLS file in
            MS Excel, formula results will be calculated automaticaly.</p>
            <p>During setting formula string ExcelLite formula parser will use English culture to parse numbers.</p>
            <p>Currently supported formula features are:
            <list type="bullet">
            <item><description>Named cell</description></item>
            <item><description>Named range</description></item>
            <item><description>Absolute cell/range</description></item>
            <item><description>Relative cell/range</description></item>
            <item><description>Functions( partly, see the list of supported functions below )</description></item>
            <item><description>Missed argument</description></item>
            <item><description>Unary operator</description></item>
            <item><description>Binary operator</description></item>
            <item><description>Parentheses</description></item>
            <item><description>3d cell reference</description></item>
            <item><description>3d cell range reference</description></item>
            <item><description>Boolean</description></item>
            <item><description>Integer</description></item>
            <item><description>Float</description></item>
            <item><description>String</description></item>
            <item><description>Error</description></item>
            </list>
            </p>
            <p>
            Currently unsupported formula features are:
            <list type="bullet">
            <item><description>Const array</description></item>
            <item><description>Array formula</description></item>
            <item><description>R1C1 reference</description></item>
            </list>
            </p>
            <p>
            Currently supported functions are:
            <list type="bullet">
            <item><description>NOW</description></item>
            <item><description>SECOND</description></item>
            <item><description>MINUTE</description></item>
            <item><description>HOUR</description></item>
            <item><description>WEEKDAY</description></item>
            <item><description>YEAR</description></item>
            <item><description>MONTH</description></item>
            <item><description>DAY</description></item>
            <item><description>TIME</description></item>
            <item><description>DATE</description></item>
            <item><description>RAND</description></item>
            <item><description>TEXT</description></item>
            <item><description>VAR</description></item>
            <item><description>MOD</description></item>
            <item><description>NOT</description></item>
            <item><description>OR</description></item>
            <item><description>AND</description></item>
            <item><description>FALSE</description></item>
            <item><description>TRUE</description></item>
            <item><description>VALUE</description></item>
            <item><description>LEN</description></item>
            <item><description>MID</description></item>
            <item><description>ROUND</description></item>
            <item><description>SIGN</description></item>
            <item><description>INT</description></item>
            <item><description>ABS</description></item>
            <item><description>LN</description></item>
            <item><description>EXP</description></item>
            <item><description>SQRT</description></item>
            <item><description>PI</description></item>
            <item><description>COS</description></item>
            <item><description>SIN</description></item>
            <item><description>COLUMN</description></item>
            <item><description>ROW</description></item>
            <item><description>MAX</description></item>
            <item><description>MIN</description></item>
            <item><description>AVERAGE</description></item>
            <item><description>SUM</description></item>
            <item><description>IF</description></item>
            <item><description>COUNT</description></item>
            </list>
            </p>
            <p>
            For more information on formulas, consult Microsoft Excel documentation.
            </p>
            </remarks>
            <example>Following code demonstrates how to use formulas and named ranges. It shows next features: 
cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
functions and named cell ranges.
<code lang="Visual Basic">
    ws.Cells("A1").Value = 5
    ws.Cells("A2").Value = 6
    ws.Cells("A3").Value = 10
 
    ws.Cells("C1").Formula = "=A1+A2"
    ws.Cells("C2").Formula = "=$A$1-A3"
    ws.Cells("C3").Formula = "=COUNT(A1:A3)"
    ws.Cells("C4").Formula = "=AVERAGE($A$1:$A$3)"
    ws.Cells("C5").Formula = "=SUM(A1:A3,2,3)"
    ws.Cells("C7").Formula = "= 123 - (-(-(23.5)))"
 
    ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"))
    ws.Cells("C8").Formula = "=MAX(DataRange)"
 
    Dim cr As CellRange = ws.Cells.GetSubrange("B9","C10")
    cr.Merged = True
    cr.Formula = "=A1*25"
</code>
<code lang="C#">	
	ws.Cells["A1"].Value = 5;
	ws.Cells["A2"].Value = 6;
	ws.Cells["A3"].Value = 10;

	ws.Cells["C1"].Formula = "=A1+A2";
	ws.Cells["C2"].Formula = "=$A$1-A3";
	ws.Cells["C3"].Formula = "=COUNT(A1:A3)";
	ws.Cells["C4"].Formula = "=AVERAGE($A$1:$A$3)";
	ws.Cells["C5"].Formula = "=SUM(A1:A3,2,3)";
	ws.Cells["C7"].Formula = "= 123 - (-(-(23.5)))";

	ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"));
	ws.Cells["C8"].Formula = "=MAX(DataRange)";

	CellRange cr = ws.Cells.GetSubrange("B9", "C10");
	cr.Merged = true;
	cr.Formula = "=A1*25";
</code>
</example>
            <seealso cref="M:GemBox.ExcelLite.NamedRangeCollection.Add(System.String,GemBox.ExcelLite.CellRange)">NamedRangeCollection.Add</seealso>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelCellCollection">
            <summary>
            Collection of excel cells (<see cref="T:GemBox.ExcelLite.ExcelCell">ExcelCell</see>).
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelCell"/>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelRowColumnCellCollectionBase">
            <summary>
            Base class for row, column and cell collections.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRowColumnCellCollectionBase.#ctor(GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRowColumnCellCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.ExcelLite.ExcelRowColumnCellCollectionBase">
            ExcelRowColumnCellCollectionBase</see>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRowColumnCellCollectionBase.Items">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRowColumnCellCollectionBase.Count">
            <summary>
            Gets the number of currently allocated elements (dynamically changes when worksheet is modified).
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelCellCollection.Item(System.Int32)">
            <summary>
            Gets the cell with the specified index.
            </summary>
            <param name="index">The zero-based index of the cell.</param>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelColumnRowBase">
            <summary>
            Base class for the excel column and row classes.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelColumnRowBase.#ctor(GemBox.ExcelLite.ExcelRowColumnCollectionBase,System.Int32)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelColumnRowBase.#ctor(GemBox.ExcelLite.ExcelRowColumnCollectionBase,GemBox.ExcelLite.ExcelColumnRowBase)">
            <summary>
            Internal. Copy constructor.
            </summary>
            <param name="parent"></param>
            <param name="source"></param>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumnRowBase.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see>) for contained cells.
            </summary>
            <remarks>
            Setting this property will not directly change <see cref="P:GemBox.ExcelLite.ExcelCell.Style">ExcelCell.Style</see>. 
            Instead, this style will be used in resolving process when writing Excel file. See 
            <see cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</see>
            for details.
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumnRowBase.IsStyleDefault">
            <summary>
            Returns <b>true</b> if style is default; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumnRowBase.Collapsed">
            <summary>
            Gets or sets whether object is collapsed in outlining.
            </summary>
            <example> Following code creates two horizontal groups and one vertical group. Horizontal groups have 
outline button above (default is below), while vertical group is collapsed.
<code lang="Visual Basic">
    Sub GroupingSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Grouping and outline example:"

        <font color="Green">' Vertical grouping.</font>
        ws.Cells(2, 0).Value = "GroupA Start"
        ws.Rows(2).OutlineLevel = 1
        ws.Cells(3, 0).Value = "A"
        ws.Rows(3).OutlineLevel = 1
        ws.Cells(4, 1).Value = "GroupB Start"
        ws.Rows(4).OutlineLevel = 2
        ws.Cells(5, 1).Value = "B"
        ws.Rows(5).OutlineLevel = 2
        ws.Cells(6, 1).Value = "GroupB End"
        ws.Rows(6).OutlineLevel = 2
        ws.Cells(7, 0).Value = "GroupA End"
        ws.Rows(7).OutlineLevel = 1
        <font color="Green">' Put outline row buttons above groups.</font>
        ws.OutlineRowButtonsBelow = False

        <font color="Green">' Horizontal grouping (collapsed).</font>
        ws.Cells("E2").Value = "Gr.C Start"
        ws.Columns("E").OutlineLevel = 1
        ws.Columns("E").Collapsed = True
        ws.Cells("F2").Value = "C"
        ws.Columns("F").OutlineLevel = 1
        ws.Columns("F").Collapsed = True
        ws.Cells("G2").Value = "Gr.C End"
        ws.Columns("G").OutlineLevel = 1
        ws.Columns("G").Collapsed = True
    End Sub
</code>
<code lang="C#">
	static void GroupingSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Grouping and outline example:";

		<font color="Green">// Vertical grouping.</font>
		ws.Cells[2,0].Value = "GroupA Start";
		ws.Rows[2].OutlineLevel = 1;
		ws.Cells[3,0].Value = "A";
		ws.Rows[3].OutlineLevel = 1;
		ws.Cells[4,1].Value = "GroupB Start";
		ws.Rows[4].OutlineLevel = 2;
		ws.Cells[5,1].Value = "B";
		ws.Rows[5].OutlineLevel = 2;
		ws.Cells[6,1].Value = "GroupB End";
		ws.Rows[6].OutlineLevel = 2;
		ws.Cells[7,0].Value = "GroupA End";
		ws.Rows[7].OutlineLevel = 1;
		<font color="Green">// Put outline row buttons above groups.</font>
		ws.OutlineRowButtonsBelow = false;

		<font color="Green">// Horizontal grouping (collapsed).</font>
		ws.Cells["E2"].Value = "Gr.C Start";
		ws.Columns["E"].OutlineLevel = 1;
		ws.Columns["E"].Collapsed = true;
		ws.Cells["F2"].Value = "C";
		ws.Columns["F"].OutlineLevel = 1;
		ws.Columns["F"].Collapsed = true;
		ws.Cells["G2"].Value = "Gr.C End";
		ws.Columns["G"].OutlineLevel = 1;
		ws.Columns["G"].Collapsed = true;
	}
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumnRowBase.OutlineLevel"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumnRowBase.OutlineLevel">
            <summary>
            Gets or sets outline level.
            </summary>
            <remarks>
            <p>Exception is thrown if value is out of 0 to 7 range.</p>
            <p>Using this property you can create hierarchical groups. Range of consecutive objects (rows or columns) 
            with the same value of outline level belongs to the same group. Default value is zero, which prevents grouping.
            <see cref="P:GemBox.ExcelLite.ExcelColumnRowBase.Collapsed">Collapsed</see> property determines whether group 
            is collapsed or expanded in outlining.</p>
            </remarks>
            <example> Following code creates two horizontal groups and one vertical group. Horizontal groups have 
outline button above (default is below), while vertical group is collapsed.
<code lang="Visual Basic">
    Sub GroupingSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Grouping and outline example:"

        <font color="Green">' Vertical grouping.</font>
        ws.Cells(2, 0).Value = "GroupA Start"
        ws.Rows(2).OutlineLevel = 1
        ws.Cells(3, 0).Value = "A"
        ws.Rows(3).OutlineLevel = 1
        ws.Cells(4, 1).Value = "GroupB Start"
        ws.Rows(4).OutlineLevel = 2
        ws.Cells(5, 1).Value = "B"
        ws.Rows(5).OutlineLevel = 2
        ws.Cells(6, 1).Value = "GroupB End"
        ws.Rows(6).OutlineLevel = 2
        ws.Cells(7, 0).Value = "GroupA End"
        ws.Rows(7).OutlineLevel = 1
        <font color="Green">' Put outline row buttons above groups.</font>
        ws.OutlineRowButtonsBelow = False

        <font color="Green">' Horizontal grouping (collapsed).</font>
        ws.Cells("E2").Value = "Gr.C Start"
        ws.Columns("E").OutlineLevel = 1
        ws.Columns("E").Collapsed = True
        ws.Cells("F2").Value = "C"
        ws.Columns("F").OutlineLevel = 1
        ws.Columns("F").Collapsed = True
        ws.Cells("G2").Value = "Gr.C End"
        ws.Columns("G").OutlineLevel = 1
        ws.Columns("G").Collapsed = True
    End Sub
</code>
<code lang="C#">
	static void GroupingSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Grouping and outline example:";

		<font color="Green">// Vertical grouping.</font>
		ws.Cells[2,0].Value = "GroupA Start";
		ws.Rows[2].OutlineLevel = 1;
		ws.Cells[3,0].Value = "A";
		ws.Rows[3].OutlineLevel = 1;
		ws.Cells[4,1].Value = "GroupB Start";
		ws.Rows[4].OutlineLevel = 2;
		ws.Cells[5,1].Value = "B";
		ws.Rows[5].OutlineLevel = 2;
		ws.Cells[6,1].Value = "GroupB End";
		ws.Rows[6].OutlineLevel = 2;
		ws.Cells[7,0].Value = "GroupA End";
		ws.Rows[7].OutlineLevel = 1;
		<font color="Green">// Put outline row buttons above groups.</font>
		ws.OutlineRowButtonsBelow = false;

		<font color="Green">// Horizontal grouping (collapsed).</font>
		ws.Cells["E2"].Value = "Gr.C Start";
		ws.Columns["E"].OutlineLevel = 1;
		ws.Columns["E"].Collapsed = true;
		ws.Cells["F2"].Value = "C";
		ws.Columns["F"].OutlineLevel = 1;
		ws.Columns["F"].Collapsed = true;
		ws.Cells["G2"].Value = "Gr.C End";
		ws.Columns["G"].OutlineLevel = 1;
		ws.Columns["G"].Collapsed = true;
	}
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumnRowBase.Collapsed"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is out of 0 to 7 range.</exception>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelRow">
            <summary>
            Excel row contains row options and cell range with row cells.
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelColumn"/>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRow.Delete">
            <summary>
            Deletes this row from the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRow.InsertEmpty(System.Int32)">
            <summary>
            Inserts specified number of empty rows before the current row.
            </summary>
            <param name="rowCount">Number of rows to insert.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRow.InsertCopy(System.Int32,GemBox.ExcelLite.ExcelRow)">
            <summary>
            Inserts specified number of copied rows before the current row.
            </summary>
            <param name="rowCount">Number of rows to insert.</param>
            <param name="sourceRow">Source row to copy.</param>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRow.Cells">
            <summary>
            Gets cell range with row cells.
            </summary>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelRow.AllocatedCells"/>
            <seealso cref="T:GemBox.ExcelLite.ExcelCell"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRow.AllocatedCells">
            <summary>
            Gets only currently allocated cells for this row.
            </summary>
            <remarks>
            <p>Use this collection if you are reading entire Excel file (you don't know exact position of 
            cells with data). If writing values, using <see cref="P:GemBox.ExcelLite.ExcelRow.Cells">Cells</see>
            property is recommended.</p>
            <p>This collection contains only allocated cells so it is faster as you avoid  
            checking every single cell in a row. You still need to check if a specific cell contains 
            any value (it can be empty).</p>
            </remarks>
            <example> Following code reads entire XLS file and displays all cells containing any data. 
Data types are also displayed. 
<code lang="Visual Basic">
	Dim ef As ExcelFile = New ExcelFile("..\TestWorkbook.xls")
	Dim sheet As ExcelWorksheet
	Dim row As ExcelRow
	Dim cell As ExcelCell

	For Each sheet In ef.Worksheets
		Console.WriteLine("--------- {0} ---------", sheet.Name)

		For Each row In sheet.Rows
			For Each cell In row.AllocatedCells
				If Not cell.Value Is Nothing Then
					Console.Write("{0}({1})", cell.Value, cell.Value.GetType().Name)
				End If

				Console.Write(vbTab)
			Next

			Console.WriteLine()
		Next
	Next
</code>
<code lang="C#">
	ExcelFile ef = new ExcelFile("..\\..\\TestWorkbook.xls");

	foreach(ExcelWorksheet sheet in ef.Worksheets)
	{
		Console.WriteLine("--------- {0} ---------", sheet.Name);

		foreach(ExcelRow row in sheet.Rows)
		{
			foreach(ExcelCell cell in row.AllocatedCells)
			{
				if(cell.Value != null)
					Console.Write("{0}({1})", cell.Value, cell.Value.GetType().Name);

				Console.Write("\t");
			}

			Console.WriteLine();
		}
	}
</code> 
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelRow.Cells"/>
            <seealso cref="T:GemBox.ExcelLite.ExcelCell"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRow.Height">
            <summary>
            Gets or sets row height.
            </summary>
            <remarks>
            Unit is twip (1/20th of a point).
            </remarks>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelRowColumnCollectionBase">
            <summary>
            Base class for row and column collections.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRowColumnCollectionBase.#ctor(GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelRowCollection">
            <summary>
            Collection of excel rows (<see cref="T:GemBox.ExcelLite.ExcelRow">ExcelRow</see>).
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelRow"/>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRowCollection.RowNameToIndex(System.String)">
            <summary>
            Converts row name ("1", "2", ...) to row index (0, 1, ...).
            </summary>
            <param name="name">Row name.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelRowCollection.RowIndexToName(System.Int32)">
            <summary>
            Converts row index (0, 1, ...) to row name ("1", "2", ...).
            </summary>
            <param name="rowIndex">Row index.</param>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRowCollection.Item(System.Int32)">
            <overloads>Gets the row with the specified index or name.</overloads>
            <summary>
            Gets the row with the specified index.
            </summary>
            <param name="index">The zero-based index of the row.</param>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelRowCollection.Item(System.String)">
            <summary>
            Gets the row with the specified name.
            </summary>
            <param name="name">The name of the row.</param>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelColumn">
            <summary>
            Excel column contains column options and cell range with column cells.
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelRow"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumn.Cells">
            <summary>
            Gets cell range with column cells.
            </summary>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
            <seealso cref="T:GemBox.ExcelLite.ExcelCell"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumn.Width">
            <summary>
            Gets or sets column width.
            </summary>
            <remarks>
            Unit is 1/256th of the width of the zero character in default font.
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelWorksheet.DefaultColumnWidth"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumn.Hidden">
            <summary>
            Gets or sets whether column is hidden.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelColumnCollection">
            <summary>
            Collection of excel columns (<see cref="T:GemBox.ExcelLite.ExcelColumn">ExcelColumn</see>).
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelColumn"/>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelColumnCollection.ColumnNameToIndex(System.String)">
            <summary>
            Converts column name ("A", "B", ...) to column index (0, 1, ...).
            </summary>
            <param name="name">Column name.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelColumnCollection.ColumnIndexToName(System.Int32)">
            <summary>
            Converts column index (0, 1, ...) to column name ("A", "B", ...).
            </summary>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumnCollection.Item(System.Int32)">
            <overloads>Gets the column with the specified index or name.</overloads>
            <summary>
            Gets the column with the specified index.
            </summary>
            <param name="index">The zero-based index of the column.</param>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelColumnCollection.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="name">The name of the column.</param>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
        </member>
        <member name="T:GemBox.ExcelLite.PageBreak">
            <summary>
            Base class for all page breaks.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.HorizontalPageBreak">
            <summary>
            Specifies a horizontal position where the new page begins when the worksheet is printed.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.HorizontalPageBreak.Row">
            <summary>
            Index of the first row of the new page.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.HorizontalPageBreak.FirstColumn">
            <summary>
            Index of the first column of the new page.
            </summary>
            <remarks>
            Use 0 (first column) if you don't care.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.HorizontalPageBreak.LastColumn">
            <summary>
            Index of the last column of the new page.
            </summary>
            <remarks>
            Use 255 (last column) if you don't care.
            </remarks>
        </member>
        <member name="T:GemBox.ExcelLite.VerticalPageBreak">
            <summary>
            Specifies a vertical position where the new page begins when the worksheet is printed.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.VerticalPageBreak.Column">
            <summary>
            Index of the first column of the new page.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.VerticalPageBreak.FirstRow">
            <summary>
            Index of the first row of the new page.
            </summary>
            <remarks>
            Use 0 (first row) if you don't care.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.VerticalPageBreak.LastRow">
            <summary>
            Index of the last row of the new page.
            </summary>
            <remarks>
            Use 65535 (last row) if you don't care.
            </remarks>
        </member>
        <member name="T:GemBox.ExcelLite.PageBreakCollection">
            <summary>
            Base class for page break collections.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.PageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.PageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page break at the specified index.
            </summary>
            <param name="index">The zero-based index of the page break to remove.</param>
        </member>
        <member name="M:GemBox.ExcelLite.PageBreakCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.PageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.HorizontalPageBreakCollection">
            <summary>
            Collection of horizontal page breaks (<see cref="T:GemBox.ExcelLite.HorizontalPageBreak">HorizontalPageBreak</see>).
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.HorizontalPageBreakCollection.Add(System.Int32)">
            <overloads>Ads a new horizontal page break.</overloads>
            <summary>
            Ads a new horizontal page break above the specified row.
            </summary>
            <param name="row">The zero-based index of the row.</param>
        </member>
        <member name="M:GemBox.ExcelLite.HorizontalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ads a new horizontal page break above the specified row and within specified columns.
            </summary>
            <param name="row">The zero-based index of the row.</param>
            <param name="firstColumn">The zero-based index of the first column.</param>
            <param name="lastColumn">The zero-based index of the last column.</param>
        </member>
        <member name="P:GemBox.ExcelLite.HorizontalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the horizontal page break at the specified index.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.VerticalPageBreakCollection">
            <summary>
            Collection of vertical page breaks (<see cref="T:GemBox.ExcelLite.VerticalPageBreak">VerticalPageBreak</see>).
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.VerticalPageBreakCollection.Add(System.Int32)">
            <overloads>Ads a new vertical page break.</overloads>
            <summary>
            Ads a new vertical page break left to the specified column.
            </summary>
            <param name="column">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.ExcelLite.VerticalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ads a new vertical page break left to the specified column and within specified rows.
            </summary>
            <param name="column">The zero-based index of the column.</param>
            <param name="firstRow">The zero-based index of the first row.</param>
            <param name="lastRow">The zero-based index of the last row.</param>
        </member>
        <member name="P:GemBox.ExcelLite.VerticalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the vertical page break at the specified index.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.UnmanagedStorage.WriteStream(System.String,System.Byte[])">
            <summary>
            Creates a new stream inside a file.
            </summary>
            <param name="name">Stream name.</param>
            <param name="buffer">Stream content.</param>
        </member>
        <member name="M:GemBox.ExcelLite.UnmanagedStorage.ReadStream(System.String)">
            <summary>
            Opens existing stream.
            </summary>
            <param name="name">Stream name.</param>
        </member>
        <member name="T:GemBox.ExcelLite.ControlFormulaToken">
            <summary>
            Formula token for holding control value.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ControlFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.ControlFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ControlFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.ControlFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.BoolFormulaToken">
            <summary>
            Formula token for holding bool.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.BoolFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.BoolFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.BoolFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.BoolFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.BoolFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.BoolFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelLite">
            <summary>
            Contains static licensing methods (ExcelLite Professional only) and diagnostic 
            information about executing ExcelLite assembly.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelLite.Title">
            <summary>
            ExcelLite assembly title.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelLite.FullVersion">
            <summary>
            ExcelLite assembly full version.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelLite.SetLicense(System.String)">
            <summary>
            Call this method from your application to set ExcelLite Professional serial key.
            </summary>
            <remarks>
            <p>You should call this method before using any other class from 
            ExcelLite Professional library. Key can only be set once (if you try second 
            key, exception will be thrown). The best place to call
            this method is from static constructor of your application's main class.</p>
            <p>Valid serial key has four groups of four alphanumeric characters, 
            separated with dashes (for example: "ABC1-A2BC-3ABC-AB4C").</p>
            </remarks>
            <param name="serialKey">Serial key.</param>
        </member>
        <member name="T:GemBox.ExcelLite.RefErr3dFormulaToken">
            <summary>
            Formula token for holding 3d reference error on internal cell range.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.RefErr3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.NameFormulaToken">
            <summary>
            Formula token for holding the index to a NAME/EXTERNNAME record.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.NameFormulaToken.nameIndex">
            <summary>
            One-based index to ExternName record.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NameFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NameFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NameFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NameFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.NameFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.NameFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.ErrFormulaToken">
            <summary>
            Formula token for holding error value.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ErrFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.ExcelLite.ErrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ErrFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.ErrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ErrFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ErrFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.ErrFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.ErrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="F:GemBox.ExcelLite.FormulaParser.boolList">
            <summary>
            List of allowed values for boolean primitive type
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaParser.#ctor(GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaParser"/> class.
            </summary>
            <param name="sheet">The excel worksheet.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaParser.Parse(System.String)">
            <summary>
            Parses the specified string formula.
            </summary>
            <param name="formula">The string formula.</param>
            <returns>formula token array</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaParser.AddToken(GemBox.ExcelLite.FormulaToken)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="token">The token to be added.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaParser.AddToken(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaParser.AddToken(GemBox.ExcelLite.FormulaTokenCode,System.Object)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
            <param name="data">The data to be used as the input for formula token delay initialization.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaParser.AddToken(GemBox.ExcelLite.FormulaTokenCode,System.Object[])">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
            <param name="data">The array of data to be used as the input for formula token delay initialization.</param>
        </member>
        <member name="M:GemBox.ExcelLite.XLSFileWriter.WriteGlobalRecords(GemBox.ExcelLite.AbsXLSRecords,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Writes the global records.
            </summary>
            <param name="records">The records.</param>
            <param name="worksheetRecords">The worksheet records.</param>
            <param name="worksheetNames">The worksheet names.</param>
        </member>
        <member name="T:GemBox.ExcelLite.SupBookRecord">
            <summary>
            SupBookRecord record is used to provide information about internal 3d references	
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.SupBookRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.ExcelLite.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.SupBookRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary reader to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.ExcelLite.SupBookRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.SupBookRecord"/> class.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.SupBookRecord.SheetsCount">
            <summary>
            Gets or sets the sheets count in current workbook.
            </summary>
            <value>The sheets count in current workbook.</value>
        </member>
        <member name="T:GemBox.ExcelLite.ExternsheetRecord">
            <summary>
            Externsheet record for holding information REF' structures
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExternsheetRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.ExcelLite.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.ExternsheetRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary reader to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExternsheetRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.ExternsheetRecord"/> class.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExternsheetRecord.SheetIndexes">
            <summary>
            Gets the sheet indexes.
            </summary>
            <value>The sheet indexes.</value>
        </member>
        <member name="T:GemBox.ExcelLite.SheetIndexes">
            <summary>
            SheetIndexes structure for storing index to SupBook record
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.SheetIndexes.sheetIndex">
            <summary>
            Index to first/last sheet
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.SheetIndexes.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.SheetIndexes"/> class.
            </summary>		
            <param name="sheetIndex">The first/last sheet index.</param>				
        </member>
        <member name="M:GemBox.ExcelLite.SheetIndexes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.SheetIndexes"/> class.
            </summary>
            <param name="br">The binary reader to read from.</param>
        </member>
        <member name="M:GemBox.ExcelLite.SheetIndexes.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the REF' data to the specified binary writer.
            </summary>
            <param name="bw">The destination binary writer.</param>
        </member>
        <member name="P:GemBox.ExcelLite.SheetIndexes.SheetIndex">
            <summary>
            Gets or sets the first/last sheet index.
            </summary>
            <value>The first/last sheet index.</value>
        </member>
        <member name="P:GemBox.ExcelLite.SheetIndexes.Size">
            <summary>
            Gets the size of REF' storage.
            </summary>
            <value>The size of REF' storage.</value>
        </member>
        <member name="T:GemBox.ExcelLite.MissArgFormulaToken">
            <summary>
            Formula token for holding missed argument( argument with no value ) in argument list of function.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.MissArgFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.MissArgFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.MissArgFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.Area3dFormulaToken">
            <summary>
            Formula token for holding 3d reference on internal cell range.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.AreaFormulaToken">
            <summary>
            Formula token for holding reference on cell range.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.AreaFormulaToken.regexOptions">
            <summary>
            Regular expression default settings
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.AreaFormulaToken.IsCellRangeRegex">
            <summary>
            Regula expression used to determinate whether the input string is cell range( area ) or not
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.AreaFormulaToken.firstRow">
            <summary>
            first row.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.AreaFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.AreaFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.AreaFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.AreaFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.AreaFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.AreaFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="P:GemBox.ExcelLite.AreaFormulaToken.FirstRow">
            <summary>
            Gets the first row.
            </summary>
            <value>The first row.</value>
        </member>
        <member name="F:GemBox.ExcelLite.Area3dFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Area3dFormulaToken.IsCellRange3DRegex">
            <summary>
            Regular expression used to determinate whether the input string is 3d cell range( 1t case ) or not
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Area3dFormulaToken.refIndex">
            <summary>
            REF entry' index on EXTERNSHEET record( see the Link Table ).
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.Area3dFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.Area3dFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.Area3dFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.Area3dFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.Area3dFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Area3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaTokensFactory.CreateFrom(System.Byte[],System.Int32)">
            <summary>
            Creates formula token from rpn bytes and the code read from that bytes.
            </summary>
            <param name="rpnBytes">The RPN bytes.</param>
            <param name="startIndex">The start index to read code from the RPN bytes.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaTokensFactory.CreateFunctionFromName(System.String,GemBox.ExcelLite.FormulaTokenClass,System.Byte)">
            <summary>
            Creates formula token form the name of the function.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="tokenClass">The token class.</param>
            <param name="argumentsCount">The arguments count for the function.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaTokensFactory.CreateFromCode(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Creates formula token from code.
            </summary>
            <param name="tokenCode">The token code.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaTokensFactory.CreateFromCode(System.Byte)">
            <summary>
            Creates formula token from byte code.
            </summary>
            <param name="code">The byte code.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaTokensFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaTokensFactory"/> class.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelFile">
            <summary>
            Excel file contains one or more worksheets (<see cref="T:GemBox.ExcelLite.ExcelWorksheet">ExcelWorksheet</see>)
            and workbook related properties and methods.
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelWorksheet"/>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFile.MaxColors">
            <summary>
            Maximum number of colors in Microsoft Excel.
            </summary>
            <remarks>
            This number includes 8 default colors:
            <see cref="P:System.Drawing.Color.Black">Color.Black</see>, 
            <see cref="P:System.Drawing.Color.White">Color.White</see>,
            <see cref="P:System.Drawing.Color.Red">Color.Red</see>, 
            <see cref="P:System.Drawing.Color.Green">Color.Green</see>,
            <see cref="P:System.Drawing.Color.Blue">Color.Blue</see>, 
            <see cref="P:System.Drawing.Color.Yellow">Color.Yellow</see>,
            <see cref="P:System.Drawing.Color.Magenta">Color.Magenta</see> and
            <see cref="P:System.Drawing.Color.Cyan">Color.Cyan</see>.
            </remarks>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFile.MaxCellStyles">
            <summary>
            Maximum number of user-defined cell styles in Microsoft Excel.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFile.MaxRows">
            <summary>
            Maximum number of rows in <see cref="T:GemBox.ExcelLite.ExcelWorksheet">ExcelWorksheet</see>.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFile.MaxColumns">
            <summary>
            Maximum number of columns in <see cref="T:GemBox.ExcelLite.ExcelWorksheet">ExcelWorksheet</see>.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.#ctor">
            <summary>
            Initializes an empty (no worksheets) instance of the ExcelFile class.
            </summary>
            <remarks>
            <p>To add new worksheets to a blank file use <see cref="P:GemBox.ExcelLite.ExcelFile.Worksheets">
            Worksheets</see> property, <see cref="M:GemBox.ExcelLite.ExcelWorksheetCollection.Add(System.String)">Add</see> method.</p>
            <p>To save created file use <see cref="M:GemBox.ExcelLite.ExcelFile.SaveXls(System.String)">SaveXls</see> 
            or <see cref="M:GemBox.ExcelLite.ExcelFile.SaveCsv(System.String,GemBox.ExcelLite.CsvType)">SaveCsv</see> method.</p>
            <p>To read existing file or use existing file as a template use 
            <see cref="M:GemBox.ExcelLite.ExcelFile.LoadXls(System.String)">LoadXls</see> 
            or <see cref="M:GemBox.ExcelLite.ExcelFile.LoadCsv(System.String,GemBox.ExcelLite.CsvType)">LoadCsv</see> method.</p>
            </remarks>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.#ctor(System.String)">
            <summary>
            Loads the existing XLS file (preserving MS Excel records).
            </summary>
            <param name="fileName">Existing XLS file name (opened for reading).</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.#ctor(System.String,GemBox.ExcelLite.XlsOptions)">
            <summary>
            Loads the existing XLS file (optionally preserving MS Excel records).
            </summary>
            <remarks>
            <p>If the only purpose of loading the file is to read data values and formatting using 
            ExcelLite API, you should use <i>xlsOptions</i> set to <see cref="F:GemBox.ExcelLite.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</p>
            <p>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by ExcelLite API.</p>
            </remarks>
            <param name="fileName">Existing XLS file name (opened for reading).</param>
            <param name="xlsOptions">XLS options.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.#ctor(System.String,GemBox.ExcelLite.CsvType)">
            <summary>
            Loads the existing CSV file with specified format.
            </summary>
            <param name="fileName">Existing CSV file name (opened for reading).</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.SaveXls(System.String)">
            <summary>
            Saves all data to a new file in XLS format.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.SaveCsv(System.String,GemBox.ExcelLite.CsvType)">
            <overloads>Saves all data to a new file in CSV format.</overloads>
            <summary>
            Saves all data to a new file in a specified CSV format.
            </summary>
            <param name="fileName">File name.</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.SaveCsv(System.String,System.Char)">
            <summary>
            Saves all data to a new CSV file, using specified character as a delimiter.
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.LoadXls(System.String)">
            <overloads>Loads the existing XLS file</overloads>
            <summary>
            Loads the existing XLS file (preserving MS Excel records).
            </summary>
            <param name="fileName">Existing XLS file name (opened for reading).</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.LoadXls(System.String,GemBox.ExcelLite.XlsOptions)">
            <summary>
            Loads the existing XLS file (optionally preserving MS Excel records).
            </summary>
            <remarks>
            <p>If the only purpose of loading the file is to read data values and formatting using 
            ExcelLite API, you should use <i>xlsOptions</i> set to <see cref="F:GemBox.ExcelLite.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</p>
            <p>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by ExcelLite API.</p>
            </remarks>
            <param name="fileName">Existing XLS file name (opened for reading).</param>
            <param name="xlsOptions">XLS options.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.LoadCsv(System.String,GemBox.ExcelLite.CsvType)">
            <overloads>Loads the existing CSV file</overloads>
            <summary>
            Loads the existing CSV file with specified format.
            </summary>
            <param name="fileName">Existing CSV file name (opened for reading).</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.LoadCsv(System.String,System.Char)">
            <summary>
            Loads the existing CSV file, using specified character as a delimiter.
            </summary>
            <param name="fileName">File name.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.DumpToLowLevelXml(System.String,System.String)">
            <summary>
            Internal.  
            </summary>
            <param name="sourceFileName">Source file name.</param>
            <param name="destinationFileName">Destination file name.</param>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFile.SupportsType(System.Type)">
            <summary>
            Gets a value indicating whether the objects of specified type can be assigned 
            to <see cref="P:GemBox.ExcelLite.ExcelCell.Value">ExcelCell.Value</see> property.
            </summary>
            <param name="type">Queried type.</param>
            <remarks>
            Currently supported types are:
            <list type="bullet">
            <item><description>System.DBNull</description></item>
            <item><description>System.Byte</description></item>
            <item><description>System.SByte</description></item>
            <item><description>System.Int16</description></item>
            <item><description>System.UInt16</description></item>
            <item><description>System.Int64</description></item>
            <item><description>System.UInt64</description></item>
            <item><description>System.UInt32</description></item>
            <item><description>System.Int32</description></item>
            <item><description>System.Single</description></item>
            <item><description>System.Double</description></item>
            <item><description>System.Boolean</description></item>
            <item><description>System.Char</description></item>
            <item><description>System.Text.StringBuilder</description></item>
            <item><description>System.Decimal</description></item>
            <item><description>System.DateTime</description></item>
            <item><description>System.String</description></item>
            </list>
            </remarks>
            <returns><b>true</b> if the specified type is supported; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFile.Worksheets">
            <summary>
            Collection of all worksheets (<see cref="T:GemBox.ExcelLite.ExcelWorksheet">ExcelWorksheet</see>) in a workbook. 
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelWorksheet"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">
            <summary>
            Gets or sets the <see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see> resolution method.
            </summary>
            <remarks>
            <p>
            Because of limitations of Microsoft Excel file format, every cell must be written to file with
            resolved <see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see>. In the case where a cell doesn't 
            have specific property set on its <see cref="P:GemBox.ExcelLite.ExcelCell.Style">Style</see> and that 
            property is set on both row and column that contain that cell, a cell will inherit property value 
            from row or column <see cref="P:GemBox.ExcelLite.ExcelColumnRowBase.Style">Style</see>, depending 
            on the resolution method.
            </p>
            <p>
            Default value for this property is <see cref="F:GemBox.ExcelLite.RowColumnResolutionMethod.RowOverColumn">
            RowOverColumn</see>.
            </p>
            </remarks>
            <example> Following code will result in a file where cell will have right alignment because same column cell 
style property takes precedence over row cell style property. Note that resolution is property based, in 
other words if column in this case had <see cref="P:GemBox.ExcelLite.CellStyle.VerticalAlignment">
VerticalAlignment</see> set cell would inherit both <see cref="P:GemBox.ExcelLite.CellStyle.HorizontalAlignment">
HorizontalAlignment</see> and <see cref="P:GemBox.ExcelLite.CellStyle.VerticalAlignment">VerticalAlignment</see> 
from row and column. 
<code lang="Visual Basic">
	excelFile.RowColumnResolutionMethod = RowColumnResolutionMethod.ColumnOverRow
	excelFile.Worksheets(0).Cells("B2").Value = "B2"
	excelFile.Worksheets(0).Rows("2").Style.HorizontalAlignment = HorizontalAlignmentStyle.Center
	excelFile.Worksheets(0).Columns("B").Style.HorizontalAlignment = HorizontalAlignmentStyle.Right
</code>
<code lang="C#">
	excelFile.RowColumnResolutionMethod = RowColumnResolutionMethod.ColumnOverRow;
	excelFile.Worksheets[0].Cells["B2"].Value = "B2";
	excelFile.Worksheets[0].Rows["2"].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
	excelFile.Worksheets[0].Columns["B"].Style.HorizontalAlignment = HorizontalAlignmentStyle.Right;
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFile.Protected">
            <summary>
            Gets or sets the workbook protection flag.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on workbook protection, consult Microsoft Excel documentation.
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelWorksheet.Protected">ExcelWorksheet.Protected</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFile.GroupMethodsAffectedCellsLimit">
            <summary>
            Maximum number of affected cells in group set methods.
            </summary>
            <remarks>
            If user tries to modify all cells in a group which has more cells than specified limit, exception
            will be thrown. This property was introduced to prevent users from accidentally modifying millions
            of cells which results in a long delay, a large memory allocation and a big resulting file. You can 
            set this limit to value which suits your needs (minimum is 5).
            </remarks>
        </member>
        <member name="M:GemBox.ExcelLite.NumberFormatCollection.SetNumberFormat(System.Int32,System.String)">
            <summary>
            This method is designed to be used ONLY for Excel file reading.
            </summary>
            <param name="index"></param>
            <param name="formatString"></param>
        </member>
        <member name="T:GemBox.ExcelLite.XlsOptions">
            <summary>
            Options specified when reading XLS files.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.XlsOptions.None">
            <summary>
            Do not preserve records. Only records fully supported by ExcelLite API will be loaded.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.XlsOptions.PreserveGlobalRecords">
            <summary>
            Preserve global (workbook) records.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.XlsOptions.PreserveWorksheetRecords">
            <summary>
            Preserve worksheet records.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.XlsOptions.PreserveSummaries">
            <summary>
            Preserve summaries.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.XlsOptions.PreserveAll">
            <summary>
            Preserve all possible information.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.CsvType">
            <summary>
            Formatting type for CSV files.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.CsvType.CommaDelimited">
            <summary>
            Comma delimited CSV (most frequently used). 
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.CsvType.SemicolonDelimited">
            <summary>
            Semicolon delimited CSV (used by Excel if current culture specifies comma as decimal separator).
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.CsvType.TabDelimited">
            <summary>
            Tab delimited CSV.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.RowColumnResolutionMethod">
            <summary>
            Defines different methods of <see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see> resolution.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="F:GemBox.ExcelLite.RowColumnResolutionMethod.RowOverColumn">
            <summary>
            Row has precedence over column.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="F:GemBox.ExcelLite.RowColumnResolutionMethod.ColumnOverRow">
            <summary>
            Column has precedence over row.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="T:GemBox.ExcelLite.CellStyle">
            <summary>
            Contains settings specifying how the cell data will be displayed.
            </summary>
            <remarks>
            Various settings control various display aspects: alignment, patterns and shading, indentation, 
            rotation, cell protection, text wrapping, number format, font related settings and cell borders. You can 
            set cell style of a specific Excel through its <b>Style</b> property, or you can create new cell style 
            with desired properties and apply it to unlimited number of Excel objects. Note, however, that number of 
            distinct cell styles in Excel file can't exceed <see cref="F:GemBox.ExcelLite.ExcelFile.MaxCellStyles">
            ExcelFile.MaxCellStyles</see>. You don't have to worry about creating duplicate cell styles; internal 
            caching engine will eliminate duplicates in appropriate moments.
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="M:GemBox.ExcelLite.CellStyle.#ctor">
            <summary>
            Creates new cell style with default values.
            </summary>
            <remarks>
            Creating standalone cell style has sense only if you assign it to some Excel objects
            by setting <b>Style</b> property. Otherwise, the created cell style will have no effect on the Excel file.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.IsDefault">
            <summary>
            Returns <b>true</b> if cell style is default; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.HorizontalAlignment">
            <summary>
            Gets or sets horizontal alignment.
            </summary>
            <remarks>
            Default value for this property is <see cref="F:GemBox.ExcelLite.HorizontalAlignmentStyle.General">
            HorizontalAlignmentStyle.General</see>.
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
            <seealso cref="P:GemBox.ExcelLite.CellStyle.VerticalAlignment"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.VerticalAlignment">
            <summary>
            Gets or sets vertical alignment.
            </summary>
            <remarks>
            Default value for this property is <see cref="F:GemBox.ExcelLite.VerticalAlignmentStyle.Bottom">
            VerticalAlignmentStyle.Bottom</see>.
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
            <seealso cref="P:GemBox.ExcelLite.CellStyle.HorizontalAlignment"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.FillPattern">
            <summary>
            Get or sets fill pattern.
            </summary>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.Indent">
            <summary>
            Gets or sets cell data indentation.
            </summary>
            <remarks>
            <p>Indents cell contents from any edge of the cell, depending on 
            <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">IsTextVertical</see> and associated alignment. If 
            you set this property to non-zero value and <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">
            IsTextVertical</see> is <b>false</b>, it is recommended thay you also set 
            <see cref="P:GemBox.ExcelLite.CellStyle.HorizontalAlignment">HorizontalAlignment</see> to
            <see cref="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Left">HorizontalAlignmentStyle.Left</see> or
            <see cref="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Right">HorizontalAlignmentStyle.Right</see>. 
            Otherwise some versions of Microsoft Excel will have problems interpreting Indent value in 
            "Format Cells..." dialog &gt; "Alignment" tab. In the case where 
            <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">IsTextVertical</see> is <b>true</b>, you should set
            <see cref="P:GemBox.ExcelLite.CellStyle.VerticalAlignment">VerticalAlignment</see> instead.</p>
            <p>Unit is one character. Value must be between 0 and 15.</p>
            <p>Default value for this property is 0.</p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is out of range.</exception>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.Rotation">
            <summary>
            Gets or sets cell data rotation.
            </summary>
            <remarks>
            <p>Unit is degrees (1/360th of a full circle). Value must be between -90 and 90 and specifies 
            anticlockwise (counterclockwise [N.Amer]) rotation from the normal position.</p>
            <p>Because of Microsoft Excel limitations, this property and 
            <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">IsTextVertical</see> property can't be used at the 
            same time. If <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">IsTextVertical</see> is <b>true</b> and 
            rotation is set, <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">IsTextVertical</see> will be set to 
            <b>false</b>. When <see cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical">IsTextVertical</see> is set to 
            <b>true</b>, rotation will be set to 0.</p>
            <p>Default value for this property is 0.</p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is not between -90 and 90.</exception>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
            <seealso cref="P:GemBox.ExcelLite.CellStyle.IsTextVertical"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.IsTextVertical">
            <summary>
            Gets or sets whether the cell text is displayed in a vertical style.
            </summary>
            <remarks>
            <p>If <b>true</b> letters are stacked top-to-bottom.</p>
            <p>Because of Microsoft Excel limitations, this property 
            and <see cref="P:GemBox.ExcelLite.CellStyle.Rotation">Rotation</see> property can't be used at the same time. 
            When set, <see cref="P:GemBox.ExcelLite.CellStyle.Rotation">Rotation</see> property is set to 0. 
            If <see cref="P:GemBox.ExcelLite.CellStyle.Rotation">Rotation</see> property is latter set to some non-zero value,
            this property will be set to <b>false</b>.</p>
            <p>Default value for this property is <b>false</b>.</p>
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
            <seealso cref="P:GemBox.ExcelLite.CellStyle.Rotation"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.Locked">
            <summary>
            Gets or sets if the cell is locked.
            </summary>
            <remarks>
            <p>This property has meaning only if <see cref="P:GemBox.ExcelLite.ExcelFile.Protected">ExcelFile.Protected</see> 
            is set to <b>true</b>. For more information consult Microsoft Excel documentation.</p>
            <p>Default value for this property is <b>true</b>.</p>
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.Protected">ExcelFile.Protected</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.FormulaHidden">
            <summary>
            Gets or sets whether the formula is hidden in the formula bar when the cell is selected.
            </summary>
            <remarks>
            <p>This property has meaning only if <see cref="P:GemBox.ExcelLite.ExcelFile.Protected">ExcelFile.Protected</see> 
            is set to <b>true</b>. For more information consult Microsoft Excel documentation.</p>
            <p>Default value for this property is <b>false</b>.</p>
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.Protected">ExcelFile.Protected</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.WrapText">
            <summary>
            Gets or sets if the text is wrapped.
            </summary>
            <remarks>
            <p>If set to <b>true</b>, wraps cell data into multiple lines in a cell. The number of wrapped lines is 
            dependent on the width of the column and the length of the cell contents.</p>
            Default value for this property is <b>false</b>.
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.ShrinkToFit">
            <summary>
            Gets or sets if the cell text is shrunk to fit the cell.
            </summary>
            <remarks>
            <p>If set to <b>true</b>, reduces the apparent size of font characters so that all data in a selected 
            cell fits within the column. For more information consult Microsoft Excel documentation.</p>
            Default value for this property is <b>false</b>.
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.NumberFormat">
            <summary>
            Gets or sets format string that will be used to interpret and display cell value.
            </summary>
            <remarks>
            <p>If the value of this property is <see cref="F:System.String.Empty">String.Empty</see> and 
            <see cref="P:GemBox.ExcelLite.ExcelCell.Value">ExcelCell.Value</see> is of 
            <see cref="T:System.DateTime">DateTime</see> type, 
            ISO date/time format will be used as number format.</p>
            <p>For more information on number format strings consult Microsoft Excel documentation.</p>
            Default value for this property is <see cref="F:System.String.Empty">String.Empty</see>.
            </remarks>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.Font">
            <summary>
            Gets or sets font related settings.
            </summary>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellStyle.Borders">
            <summary>
            Gets or sets cell borders (<see cref="T:GemBox.ExcelLite.CellBorder">CellBorder</see>).
            </summary>
            <example> Following code demonstrates various cell style properties:
<code lang="Visual Basic">
    Sub StylesSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Cell style examples:"

        Dim row As Integer = 0

        <font color="Green">' Column width of 4, 30 and 35 characters.</font>
        ws.Columns(0).Width = 4 * 256
        ws.Columns(1).Width = 30 * 256
        ws.Columns(2).Width = 35 * 256

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Borders.SetBorders(...)"
        ws.Cells(row, 2).Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.FillPattern.SetPattern(...)"
        ws.Cells(row, 2).Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow)

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Color ="
        ws.Cells(row, 2).Value = "Color.Blue"
        ws.Cells(row, 2).Style.Font.Color = Color.Blue

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Italic ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Italic = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Name ="
        ws.Cells(row, 2).Value = "Comic Sans MS"
        ws.Cells(row, 2).Style.Font.Name = "Comic Sans MS"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.ScriptPosition ="
        ws.Cells(row, 2).Value = "ScriptPosition.Superscript"
        ws.Cells(row, 2).Style.Font.ScriptPosition = ScriptPosition.Superscript

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Size ="
        ws.Cells(row, 2).Value = "18 * 20"
        ws.Cells(row, 2).Style.Font.Size = 18 * 20

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Strikeout ="
        ws.Cells(row, 2).Value = "true"
        ws.Cells(row, 2).Style.Font.Strikeout = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.UnderlineStyle ="
        ws.Cells(row, 2).Value = "UnderlineStyle.Double"
        ws.Cells(row, 2).Style.Font.UnderlineStyle = UnderlineStyle.Double

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Font.Weight ="
        ws.Cells(row, 2).Value = "ExcelFont.BoldWeight"
        ws.Cells(row, 2).Style.Font.Weight = ExcelFont.BoldWeight

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.HorizontalAlignment ="
        ws.Cells(row, 2).Value = "HorizontalAlignmentStyle.Center"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Center

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Indent"
        ws.Cells(row, 2).Value = "five"
        ws.Cells(row, 2).Style.HorizontalAlignment = HorizontalAlignmentStyle.Left
        ws.Cells(row, 2).Style.Indent = 5

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.IsTextVertical = "
        ws.Cells(row, 2).Value = "true"
        <font color="Green">' Set row height to 50 points.</font>
        ws.Rows(row).Height = 50 * 20
        ws.Cells(row, 2).Style.IsTextVertical = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.NumberFormat"
        ws.Cells(row, 2).Value = 1234
        ws.Cells(row, 2).Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]"

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.Rotation"
        ws.Cells(row, 2).Value = "35 degrees up"
        ws.Cells(row, 2).Style.Rotation = 35

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.ShrinkToFit"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears shrunk."
        ws.Cells(row, 2).Style.ShrinkToFit = True

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.VerticalAlignment ="
        ws.Cells(row, 2).Value = "VerticalAlignmentStyle.Top"
        <font color="Green">' Set row height to 30 points.</font>
        ws.Rows(row).Height = 30 * 20
        ws.Cells(row, 2).Style.VerticalAlignment = VerticalAlignmentStyle.Top

        row = row + 2
        ws.Cells(row, 1).Value = ".Style.WrapText"
        ws.Cells(row, 2).Value = "This property is set to true so this text appears broken into multiple lines."
        ws.Cells(row, 2).Style.WrapText = True
    End Sub
</code>
<code lang="C#">
	static void StylesSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Cell style examples:";

		int row = 0;

		<font color="Green">// Column width of 4, 30 and 35 characters.</font>
		ws.Columns[0].Width = 4 * 256;
		ws.Columns[1].Width = 30 * 256;
		ws.Columns[2].Width = 35 * 256;

		ws.Cells[row+=2,1].Value = ".Style.Borders.SetBorders(...)";
		ws.Cells[row,2].Style.Borders.SetBorders(MultipleBorders.All, Color.FromArgb(252, 1, 1), LineStyle.Thin);

		ws.Cells[row+=2,1].Value = ".Style.FillPattern.SetPattern(...)";
		ws.Cells[row,2].Style.FillPattern.SetPattern(FillPatternStyle.ThinHorizontalCrosshatch, Color.Green, Color.Yellow);

		ws.Cells[row+=2,1].Value = ".Style.Font.Color =";
		ws.Cells[row,2].Value = "Color.Blue";
		ws.Cells[row,2].Style.Font.Color = Color.Blue;

		ws.Cells[row+=2,1].Value = ".Style.Font.Italic =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Italic = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.Name =";
		ws.Cells[row,2].Value = "Comic Sans MS";
		ws.Cells[row,2].Style.Font.Name = "Comic Sans MS";

		ws.Cells[row+=2,1].Value = ".Style.Font.ScriptPosition =";
		ws.Cells[row,2].Value = "ScriptPosition.Superscript";
		ws.Cells[row,2].Style.Font.ScriptPosition = ScriptPosition.Superscript;

		ws.Cells[row+=2,1].Value = ".Style.Font.Size =";
		ws.Cells[row,2].Value = "18 * 20";
		ws.Cells[row,2].Style.Font.Size = 18 * 20;

		ws.Cells[row+=2,1].Value = ".Style.Font.Strikeout =";
		ws.Cells[row,2].Value = "true";
		ws.Cells[row,2].Style.Font.Strikeout = true;

		ws.Cells[row+=2,1].Value = ".Style.Font.UnderlineStyle =";
		ws.Cells[row,2].Value = "UnderlineStyle.Double";
		ws.Cells[row,2].Style.Font.UnderlineStyle = UnderlineStyle.Double;

		ws.Cells[row+=2,1].Value = ".Style.Font.Weight =";
		ws.Cells[row,2].Value = "ExcelFont.BoldWeight";
		ws.Cells[row,2].Style.Font.Weight = ExcelFont.BoldWeight;

		ws.Cells[row+=2,1].Value = ".Style.HorizontalAlignment =";
		ws.Cells[row,2].Value = "HorizontalAlignmentStyle.Center";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

		ws.Cells[row+=2,1].Value = ".Style.Indent";
		ws.Cells[row,2].Value = "five";
		ws.Cells[row,2].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
		ws.Cells[row,2].Style.Indent = 5;

		ws.Cells[row+=2,1].Value = ".Style.IsTextVertical = ";
		ws.Cells[row,2].Value = "true";
		<font color="Green">// Set row height to 50 points.</font>
		ws.Rows[row].Height = 50 * 20;
		ws.Cells[row,2].Style.IsTextVertical = true;

		ws.Cells[row+=2,1].Value = ".Style.NumberFormat";
		ws.Cells[row,2].Value = 1234;
		ws.Cells[row,2].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

		ws.Cells[row+=2,1].Value = ".Style.Rotation";
		ws.Cells[row,2].Value = "35 degrees up";
		ws.Cells[row,2].Style.Rotation = 35;

		ws.Cells[row+=2,1].Value = ".Style.ShrinkToFit";
		ws.Cells[row,2].Value = "This property is set to true so this text appears shrunk.";
		ws.Cells[row,2].Style.ShrinkToFit = true;

		ws.Cells[row+=2,1].Value = ".Style.VerticalAlignment =";
		ws.Cells[row,2].Value = "VerticalAlignmentStyle.Top";
		<font color="Green">// Set row height to 30 points.</font>
		ws.Rows[row].Height = 30 * 20;
		ws.Cells[row,2].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

		ws.Cells[row+=2,1].Value = ".Style.WrapText";
		ws.Cells[row,2].Value = "This property is set to true so this text appears broken into multiple lines.";
		ws.Cells[row,2].Style.WrapText = true;
	}
</code> 
</example>
        </member>
        <member name="T:GemBox.ExcelLite.HashtableElement">
            <summary>
            HashtableElement. All derived classes MUST implement:
            1) HashtableElement Clone()
            2) int GetHashCode()
            3) bool Equals(object obj)
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.HorizontalAlignmentStyle">
            <summary>
            Horizontal alignment styles used for <see cref="P:GemBox.ExcelLite.CellStyle.HorizontalAlignment">
            CellStyle.HorizontalAlignment</see>.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.General">
            <summary>
            Aligns data depending on the data type (text, number, etc.). Consult Microsoft Excel documentation.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Fill">
            <summary>
            Fill alignment repeats cell data to fill the whole cell.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.CenterAcross">
            <summary>
            Centered across selection. Multiple cells can be selected but only one should have value for this alignment to have effect.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.HorizontalAlignmentStyle.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.VerticalAlignmentStyle">
            <summary>
            Vertical alignment styles used for <see cref="P:GemBox.ExcelLite.CellStyle.VerticalAlignment">
            CellStyle.VerticalAlignment</see>.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.VerticalAlignmentStyle.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.VerticalAlignmentStyle.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.VerticalAlignmentStyle.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.VerticalAlignmentStyle.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.CellBorder">
            <summary>
            Contains settings for a single cell border.
            </summary>
            <remarks>
Note that although diagonal-up (<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see> 
or <see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down 
(<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
<see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set, 
they share the same color and the same line style. This is a Microsoft Excel limitation.
</remarks>
            <seealso cref="T:GemBox.ExcelLite.CellBorders"/>
        </member>
        <member name="M:GemBox.ExcelLite.CellBorder.SetBorder(System.Drawing.Color,GemBox.ExcelLite.LineStyle)">
            <summary>
            Sets both border line color and line style.
            </summary>
            <param name="lineColor">Border line color.</param>
            <param name="lineStyle">Border line style.</param>
            <remarks>
Note that although diagonal-up (<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see> 
or <see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down 
(<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
<see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set, 
they share the same color and the same line style. This is a Microsoft Excel limitation.
</remarks>
        </member>
        <member name="P:GemBox.ExcelLite.CellBorder.LineColor">
            <summary>
            Gets or sets border line color.
            </summary>
            <remarks>
Note that although diagonal-up (<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see> 
or <see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down 
(<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
<see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set, 
they share the same color and the same line style. This is a Microsoft Excel limitation.
</remarks>
        </member>
        <member name="P:GemBox.ExcelLite.CellBorder.LineStyle">
            <summary>
            Gets or sets border line style.
            </summary>
            <remarks>
Note that although diagonal-up (<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see> 
or <see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down 
(<see cref="F:GemBox.ExcelLite.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
<see cref="F:GemBox.ExcelLite.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set, 
they share the same color and the same line style. This is a Microsoft Excel limitation.
</remarks>
        </member>
        <member name="T:GemBox.ExcelLite.CellBorders">
            <summary>
            Collection of cell borders (<see cref="T:GemBox.ExcelLite.CellBorder">CellBorder</see>).
            </summary>
            <seealso cref="T:GemBox.ExcelLite.CellBorder"/>
        </member>
        <member name="M:GemBox.ExcelLite.CellBorders.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">
            <summary>
            Sets specific line color and line style on multiple borders.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Border line color.</param>
            <param name="lineStyle">Border line style.</param>
        </member>
        <member name="P:GemBox.ExcelLite.CellBorders.Item(GemBox.ExcelLite.IndividualBorder)">
            <summary>
            Gets specific border.
            </summary>
            <param name="individualBorder">Border to get.</param>
        </member>
        <member name="T:GemBox.ExcelLite.LineStyle">
            <summary>
            Line styles used for 
            <see cref="P:GemBox.ExcelLite.CellBorder.LineStyle">CellBorder.LineStyle</see>.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.Thin">
            <summary>
            Thin line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.Medium">
            <summary>
            Medium line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.Dashed">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.Dotted">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.Thick">
            <summary>
            Thick line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.DoubleLine">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.Hair">
            <summary>
            Hair line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.MediumDashed">
            <summary>
            Medium dashed line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.MediumDashDot">
            <summary>
            Medium dash-dot line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot line.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.LineStyle.SlantedDashDot">
            <summary>
            Slanted dash-dot line.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.IndividualBorder">
            <summary>
            Different borders that can be set on excel cell. Members of this enumeration can't be combined.
            </summary>
            <seealso cref="T:GemBox.ExcelLite.MultipleBorders"/>
        </member>
        <member name="F:GemBox.ExcelLite.IndividualBorder.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.IndividualBorder.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.IndividualBorder.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.IndividualBorder.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.IndividualBorder.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.IndividualBorder.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.MultipleBorders">
            <summary>
            Flags for borders and border groups that can be set on the excel cell. 
            </summary>
            <seealso cref="T:GemBox.ExcelLite.IndividualBorder"/>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.None">
            <summary>
            None of the borders are used.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Horizontal">
            <summary>
            Horizontal borders.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Vertical">
            <summary>
            Vertical borders.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Diagonal">
            <summary>
            Diagonal borders.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.Outside">
            <summary>
            Outside borders.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.MultipleBorders.All">
            <summary>
            All borders are used.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelFillPattern">
            <summary>
            Contains fill pattern settings.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFillPattern.SetSolid(System.Drawing.Color)">
            <summary>
            Sets solid pattern using specified fill color.
            </summary>
            <param name="fillColor">Fill color.</param>
            <remarks>
            This will set <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternStyle">PatternStyle</see> to 
            <see cref="F:GemBox.ExcelLite.FillPatternStyle.Solid">FillPatternStyle.Solid</see> and 
            <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternForegroundColor">PatternForegroundColor</see> 
            to <i>fillColor</i>.
            </remarks>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelFillPattern.SetPattern(GemBox.ExcelLite.FillPatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Sets complex (non-empty and non-solid) pattern.
            </summary>
            <param name="patternStyle">Pattern style.</param>
            <param name="foregroundColor">Foreground color.</param>
            <param name="backgroundColor">Background color.</param>
            <remarks>
            <p>For solid pattern, just use <see cref="M:GemBox.ExcelLite.ExcelFillPattern.SetSolid(System.Drawing.Color)">SetSolid</see> method.</p>
            <p>To clear fill pattern, just set <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternStyle">PatternStyle</see> 
            to <see cref="F:GemBox.ExcelLite.FillPatternStyle.None">FillPatternStyle.None</see></p>
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFillPattern.PatternStyle">
            <summary>
            Gets or sets fill pattern style.
            </summary>
            <remarks>
            If you set this property to anything else than <see cref="F:GemBox.ExcelLite.FillPatternStyle.None">
            FillPatternStyle.None</see>, <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternForegroundColor">
            PatternForegroundColor</see> and/or <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternBackgroundColor">
            PatternBackgroundColor</see> should also be set (if color is 
            different from default <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFillPattern.PatternForegroundColor">
            <summary>
            Get or sets fill pattern foreground color.
            </summary>
            <seealso cref="T:GemBox.ExcelLite.FillPatternStyle"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFillPattern.PatternBackgroundColor">
            <summary>
            Get or sets fill pattern background color.
            </summary>
            <seealso cref="T:GemBox.ExcelLite.FillPatternStyle"/>
        </member>
        <member name="T:GemBox.ExcelLite.FillPatternStyle">
            <summary>
            Fill pattern styles used for 
            <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternStyle">ExcelFillPattern.PatternStyle</see>.
            </summary>
            <remarks>
            <p>To see names of Microsoft Excel patterns, start Microsoft Excel and go to "Format" menu &gt; "Cells..." submenu &gt; 
            "Patterns" tab &gt; "Pattern" drop-down. When hovering over a pattern, Microsoft Excel name is displayed in tooltip
            text.</p>
            <p><b>None</b> fill pattern uses no colors.</p>
            <p><b>Solid</b> fill pattern uses <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternForegroundColor">
            ExcelFillPattern.PatternForegroundColor</see>.</p>
            <p>All other paterns use both <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternForegroundColor">
            ExcelFillPattern.PatternForegroundColor</see> and 
            <see cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternBackgroundColor">ExcelFillPattern.PatternBackgroundColor</see></p>
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternStyle">ExcelFillPattern.PatternStyle</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternForegroundColor">ExcelFillPattern.PatternForegroundColor</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelFillPattern.PatternBackgroundColor">ExcelFillPattern.PatternBackgroundColor</seealso>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.None">
            <summary>
            No fill pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.Solid">
            <summary>
            "Solid" fill pattern using foreground color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.Gray6">
            <summary>
            "6% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.Gray12">
            <summary>
            "12% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.Gray25">
            <summary>
            "25% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.Gray50">
            <summary>
            "50% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.Gray75">
            <summary>
            "75% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.HorizontalStripe">
            <summary>
            "Horizontal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.VerticalStripe">
            <summary>
            "Vertical Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.DiagonalStripe">
            <summary>
            "Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ReverseDiagonalStripe">
            <summary>
            "Reverse Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.DiagonalCrosshatch">
            <summary>
            "Diagonal Crosshatch" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThickDiagonalCrosshatch">
            <summary>
            "Thick Diagonal Crosshatch" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThinHorizontalStripe">
            <summary>
            "Thin Horizontal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThinVerticalStripe">
            <summary>
            "Thin Vertical Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThinDiagonalStripe">
            <summary>
            "Thin Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThinReverseDiagonalStripe">
            <summary>
            "Thin Reverse Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThinHorizontalCrosshatch">
            <summary>
            "Thin Horizontal Crosshatch" pattern.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FillPatternStyle.ThinDiagonalCrosshatch">
            <summary>
            "Thin Diagonal Crosshatch" pattern.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelFont">
            <summary>
            Contains font related settings.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFont.MinWeight">
            <summary>
            Minimum font weight.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFont.NormalWeight">
            <summary>
            Normal font weight.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFont.BoldWeight">
            <summary>
            Default bold font weight.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.ExcelLite.ExcelFont.MaxWeight">
            <summary>
            Maximum font weight.
            </summary>
            <seealso cref="P:GemBox.ExcelLite.ExcelFont.Weight"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.Name">
            <summary>
            Gets or sets name of the font.
            </summary>
            <remarks>
            Default value for this property is "Arial".
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.Color">
            <summary>
            Gets or sets font color.
            </summary>
            <remarks>
            Default value for this property is <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.Weight">
            <summary>
            Gets or sets font weight (font boldness).
            </summary>
            <remarks>
            <p>Font weight is an integer value between <see cref="F:GemBox.ExcelLite.ExcelFont.MinWeight">
            MinWeight</see> and <see cref="F:GemBox.ExcelLite.ExcelFont.MaxWeight">MaxWeight</see>.</p>
            <p>If you want font to have standard boldness, set this property to
            <see cref="F:GemBox.ExcelLite.ExcelFont.BoldWeight">BoldWeight</see>.</p>
            <p>Default value of this property is <see cref="F:GemBox.ExcelLite.ExcelFont.NormalWeight">NormalWeight</see>.</p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if font weight is out of allowed range.</exception>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.Size">
            <summary>
            Gets or sets font size.
            </summary>
            <remarks>
            <p>Unit is twip (1/20th of a point).</p>
            <p>Default value of this property is 200.</p>
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.Italic">
            <summary>
            Gets or sets if the font is italic.
            </summary>
            <remarks>
            Default value of this property is <b>false</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.Strikeout">
            <summary>
            Gets or sets if the font is struck out.
            </summary>
            <remarks>
            Default value of this property is <b>false</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.ScriptPosition">
            <summary>
            Gets or sets font script position.
            </summary>
            <remarks>
            Default value of this property is <see cref="F:GemBox.ExcelLite.ScriptPosition.Normal">ScriptPosition.Normal</see>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelFont.UnderlineStyle">
            <summary>
            Gets or sets font underlining.
            </summary>
            <remarks>
            Default value of this property is <see cref="F:GemBox.ExcelLite.UnderlineStyle.None">UnderlineStyle.None</see>.
            </remarks>
        </member>
        <member name="T:GemBox.ExcelLite.ScriptPosition">
            <summary>
            Script positions used in <see cref="P:GemBox.ExcelLite.ExcelFont.ScriptPosition">ExcelFont.ScriptPosition</see>.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ScriptPosition.Normal">
            <summary>
            Normal script position.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ScriptPosition.Superscript">
            <summary>
            Displays script above normal position.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.ScriptPosition.Subscript">
            <summary>
            Displays script below normal position.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.UnderlineStyle">
            <summary>
            Underline styles used in <see cref="P:GemBox.ExcelLite.ExcelFont.UnderlineStyle">ExcelFont.UnderlineStyle</see>.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.UnderlineStyle.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.UnderlineStyle.Single">
            <summary>
            Single underline. Underlines only cell data.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.UnderlineStyle.Double">
            <summary>
            Double underline. Underlines only cell data.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.UnderlineStyle.SingleAccounting">
            <summary>
            Single accounting underline. Underlines whole cell.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.UnderlineStyle.DoubleAccounting">
            <summary>
            Double accounting underline. Underlines whole cell.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.CellRange">
            <summary>
            Cell range is a rectangular group of worksheet cells.
            </summary>
            <remarks>
            <p>Cell range is determined by its top (<see cref="P:GemBox.ExcelLite.CellRange.FirstRowIndex">FirstRowIndex</see>), 
            left (<see cref="P:GemBox.ExcelLite.CellRange.FirstColumnIndex">FirstColumnIndex</see>), 
            bottom (<see cref="P:GemBox.ExcelLite.CellRange.LastRowIndex">LastRowIndex</see>) and 
            right (<see cref="P:GemBox.ExcelLite.CellRange.LastColumnIndex">LastColumnIndex</see>) borders. This properties 
            are read-only, so if you require different cell range use one of GetSubrange methods 
            (<see cref="M:GemBox.ExcelLite.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)">GetSubrangeAbsolute</see>, 
            <see cref="M:GemBox.ExcelLite.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)">GetSubrangeRelative</see> or 
            <see cref="M:GemBox.ExcelLite.CellRange.GetSubrange(System.String,System.String)">GetSubrange</see>). Specific cell can be accessed in a few 
            ways, depending on <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see>. Cells in the 
            range can be merged / unmerged by the use of <see cref="P:GemBox.ExcelLite.CellRange.Merged">Merged</see> 
            property.</p>
            <p><see cref="P:GemBox.ExcelLite.CellRange.Value">Value</see> property set will set value of multiple cells 
            or of a merged range. <see cref="P:GemBox.ExcelLite.CellRange.Value">Value</see> property get has meaning 
            only if range is merged; otherwise, exception is thrown.</p>
            <p><see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property set will set style of multiple cells 
            or of a merged range. <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property get has meaning 
            only if range is merged; otherwise, exception is thrown.</p>
            <p> Note that for <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property set on a cell range that 
is not merged, you can't use the following format:
<code lang="Visual Basic">
	Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells
	cr.Style.Rotation = 30
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;
	cr.Style.Rotation = 30;
</code>
because that would first call <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property get method and that 
will certainly fail because <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property get is defined only 
for a merged cell range. </p><p>Instead you can use two different code patterns, depending on whether you want to replace or combine the existing 
cell range styles with the new style.</p><p>
If you want to <b>replace</b> cell style on every cell in a cell range use the following code:
<code lang="Visual Basic">
	Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells
	Dim style As CellStyle = New CellStyle()
	style.Rotation = 30
	cr.Style = style
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;
	CellStyle style = new CellStyle();
	style.Rotation = 30;
	cr.Style = style;
</code>
</p><p>
If you want to <b>set</b> cell style property on every cell in a cell range (other cell style property values will 
remain unchanged) use the following code:
<code lang="Visual Basic">
    Dim cell As ExcelCell
    For Each cell In excelFile.Worksheets(0).Rows(1).Cells
        cell.Style.Rotation = 30
    Next
</code>
<code lang="C#">
	foreach(ExcelCell cell in excelFile.Worksheets[0].Rows[1].Cells)
		cell.Style.Rotation = 30;
</code>
</p>
            </remarks>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.PositionToRowColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Converts position string ("A1", "BN27", etc.) to row and column index.
            </summary>
            <param name="position">Position string.</param>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.RowColumnToPosition(System.Int32,System.Int32)">
            <summary>
            Converts row and column index to position string ("A1", "BN27", etc.).
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Position string.</returns>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see> is equal 
            to the current <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>.
            </summary>
            <param name="obj">Object of <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see> type.</param>
            <returns><b>true</b> if the specified <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see> is equal 
            to the current <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>.
            </returns>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">
            <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see> (all cells).
            </summary>
            <remarks>
            Returns default enumerator that iterates all cells in the range. If you are only reading existing
            cells (values or formatting), use more appropriate <see cref="M:GemBox.ExcelLite.CellRange.GetReadEnumerator"/>.
            </remarks>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.GetReadEnumerator">
            <summary>
            Returns enumerator for the <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see> (only allocated cells).
            </summary>
            <remarks>
            Returns enumerator that iterates only already allocated cells in the range. If you are only reading existing
            cells (values or formatting), use this enumerator as it is faster and doesn't allocate unnecessary cells.
            </remarks>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new cell range using absolute indexing.
            </summary>
            <param name="firstRow">Absolute index of the first row.</param>
            <param name="firstColumn">Absolute index of the first column.</param>
            <param name="lastRow">Absolute index of the last row.</param>
            <param name="lastColumn">Absolute index of the last column.</param>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if arguments are out of range.</exception>
            <seealso cref="P:GemBox.ExcelLite.CellRange.FirstRowIndex"/>
            <seealso cref="P:GemBox.ExcelLite.CellRange.FirstColumnIndex"/>
            <seealso cref="P:GemBox.ExcelLite.CellRange.LastRowIndex"/>
            <seealso cref="P:GemBox.ExcelLite.CellRange.LastColumnIndex"/>
            <seealso cref="M:GemBox.ExcelLite.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.ExcelLite.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new cell range using relative indexing.
            </summary>
            <param name="relativeRow">Relative index of the first row.</param>
            <param name="relativeColumn">Relative index of the first column.</param>
            <param name="width">Width of new cell range in columns.</param>
            <param name="height">Height of new cell range in rows.</param>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if arguments are out of range.</exception>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Width"/>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Height"/>
            <seealso cref="M:GemBox.ExcelLite.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.ExcelLite.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.GetSubrange(System.String,System.String)">
            <summary>
            Returns new cell range using start and end position.
            </summary>
            <param name="firstCell">Name of first (top-left) cell.</param>
            <param name="lastCell">Name of last (bottom-right) cell.</param>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if arguments are out of range.</exception>
            <seealso cref="P:GemBox.ExcelLite.CellRange.StartPosition"/>
            <seealso cref="P:GemBox.ExcelLite.CellRange.EndPosition"/>
            <seealso cref="M:GemBox.ExcelLite.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.ExcelLite.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.CopyTo(System.Int32,System.Int32)">
            <overloads>Copies this cell range to the specified position.</overloads>
            <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
            <param name="absoluteRow">Absolute index of the destination row.</param>
            <param name="absoluteColumn">Absolute index of the destination column.</param>
            <remarks>
            <p><i>absoluteRow</i> and <i>absoluteColumn</i> specify position of the top-left cell of 
            the destination cell range.</p>
            <p>Destination cell range has the same width and height as this cell range.</p>
            <p><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.CopyTo(GemBox.ExcelLite.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Copies this cell range to another worksheet.
            </summary>
            <param name="destinationWorksheet">Destination worksheet.</param>
            <param name="absoluteRow">Absolute index of the destination row.</param>
            <param name="absoluteColumn">Absolute index of the destination column.</param>
            <remarks>
            <p><i>absoluteRow</i> and <i>absoluteColumn</i> specify position of the top-left cell of 
            the destination cell range.</p>
            <p>Destination cell range has the same width and height as this cell range.</p>
            <p><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.CopyTo(System.String)">
            <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
            <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
            <remarks>
            <p><i>topLeftCell</i> specifies position of the top-left cell of 
            the destination cell range.</p>
            <p>Destination cell range has the same width and height as this cell range.</p>
            <p><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.CopyTo(GemBox.ExcelLite.ExcelWorksheet,System.String)">
            <summary>
            Copies this cell range to another worksheet.
            </summary>
            <param name="destinationWorksheet">Destination worksheet.</param>
            <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
            <remarks>
            <p><i>topLeftCell</i> specifies position of the top-left cell of 
            the destination cell range.</p>
            <p>Destination cell range has the same width and height as this cell range.</p>
            <p><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.ExcelLite.CellRange.Overlaps(GemBox.ExcelLite.CellRange)">
            <summary>
            Checks if this cell range overlaps with another cell range.
            </summary>
            <param name="range">Cell range.</param>
            <returns><b>true</b> if cell ranges overlap; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.FirstRowIndex">
            <summary>
            Gets index of the first (topmost) row.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.FirstColumnIndex">
            <summary>
            Gets index of the first (leftmost) column.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.LastRowIndex">
            <summary>
            Gets index of the last (bottommost) row.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.LastColumnIndex">
            <summary>
            Gets index of the last (rightmost) column.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Width">
            <summary>
            Gets width of this cell range, in columns.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Height">
            <summary>
            Gets height of this cell range, in rows.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.StartPosition">
            <summary>
            Gets name of the first (top-left) cell in this cell range.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.EndPosition">
            <summary>
            Gets name of the last (bottom-right) cell in this cell range.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.IsAnyCellMerged">
            <summary>
            Returns <b>true</b> is any cell in this cell range is merged; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Item(System.Int32)">
            <overloads>Gets excel cell with the specified name or at the specified position.</overloads>
            <summary>
            Gets excel cell at the specified index.
            </summary>
            <param name="contextIndex">The zero-based context index of the cell.</param>
            <remarks>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see> is 
            <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> context index  
            is specifying relative column position.</p>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see> is 
            <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> context index
            is specifying relative row position.</p>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see> is 
            <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> context index
            is specifying cell index inside cell range. The cell at <see cref="P:GemBox.ExcelLite.CellRange.StartPosition">
            StartPosition</see> has index 0, and the cell at 
            <see cref="P:GemBox.ExcelLite.CellRange.EndPosition">EndPosition</see> has index of 
            <see cref="P:GemBox.ExcelLite.CellRange.Width">Width</see> x 
            <see cref="P:GemBox.ExcelLite.CellRange.Height">Height</see> - 1.</p>
            </remarks>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.CellRange.IndexingMode"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets excel cell at the specified relative position.
            </summary>
            <param name="relativeRow">The zero-based relative row position.</param>
            <param name="relativeColumn">The zero-based relative column position.</param>
            <remarks>
            Absolute position of excel cell is calculated by adding <i>relativeRow</i> and <i>relativeColumn</i> to
            <see cref="P:GemBox.ExcelLite.CellRange.FirstRowIndex">FirstRowIndex</see> and 
            <see cref="P:GemBox.ExcelLite.CellRange.FirstColumnIndex">FirstColumnIndex</see>.
            </remarks>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Item(System.String)">
            <summary>
            Gets excel cell with the specified full or partial name.
            </summary>
            <param name="contextName">Full or partial name of the cell.</param>
            <remarks>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see> is 
            <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> full name of 
            the cell must be used (for example; "A1", "D7", etc.).</p>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see> is 
            <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> column name  
            must be used (for example; "A", "D", etc.).</p>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.IndexingMode">IndexingMode</see> is 
            <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> row name 
            must be used (for example; "1", "7", etc.).</p>
            </remarks>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.CellRange.IndexingMode"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Merged">
            <summary>
            Gets or sets whether cells in this range are merged.
            </summary>
            <remarks>
            <p>By setting this property to <b>true</b>, you are merging all the cells 
            (<see cref="T:GemBox.ExcelLite.ExcelCell">ExcelCell</see>) in this range. Merging process will fail if any 
            of the cells in the range is already merged.</p>
            <p>When modifying merged cell, whole merged range is modified. For example, if you set 
            <see cref="P:GemBox.ExcelLite.ExcelCell.Value">ExcelCell.Value</see>, value of merged range will be modified. 
            You can find out if the cell is merged by checking if 
            <see cref="P:GemBox.ExcelLite.ExcelCell.MergedRange">ExcelCell.MergedRange</see> property is different 
            than <b>null</b>.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when merged range can't be created because some of the cells
            in the range are already merged.</exception>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Formula">
            <summary>
            Gets or sets formula string.
            </summary>
            <remarks>
            <p>ExcelLite can read and write formulas, but can not calculate formula results. When you open a XLS file in
            MS Excel, formula results will be calculated automaticaly.</p>
            <p>During setting formula string ExcelLite formula parser will use English culture to parse numbers.</p>
            <p>Currently supported formula features are:
            <list type="bullet">
            <item><description>Named cell</description></item>
            <item><description>Named range</description></item>
            <item><description>Absolute cell/range</description></item>
            <item><description>Relative cell/range</description></item>
            <item><description>Functions( partly, see the list of supported functions below )</description></item>
            <item><description>Missed argument</description></item>
            <item><description>Unary operator</description></item>
            <item><description>Binary operator</description></item>
            <item><description>Parentheses</description></item>
            <item><description>3d cell reference</description></item>
            <item><description>3d cell range reference</description></item>
            <item><description>Boolean</description></item>
            <item><description>Integer</description></item>
            <item><description>Float</description></item>
            <item><description>String</description></item>
            <item><description>Error</description></item>
            </list>
            </p>
            <p>
            Currently unsupported formula features are:
            <list type="bullet">
            <item><description>Const array</description></item>
            <item><description>Array formula</description></item>
            <item><description>R1C1 reference</description></item>
            </list>
            </p>
            <p>
            Currently supported functions are:
            <list type="bullet">
            <item><description>NOW</description></item>
            <item><description>SECOND</description></item>
            <item><description>MINUTE</description></item>
            <item><description>HOUR</description></item>
            <item><description>WEEKDAY</description></item>
            <item><description>YEAR</description></item>
            <item><description>MONTH</description></item>
            <item><description>DAY</description></item>
            <item><description>TIME</description></item>
            <item><description>DATE</description></item>
            <item><description>RAND</description></item>
            <item><description>TEXT</description></item>
            <item><description>VAR</description></item>
            <item><description>MOD</description></item>
            <item><description>NOT</description></item>
            <item><description>OR</description></item>
            <item><description>AND</description></item>
            <item><description>FALSE</description></item>
            <item><description>TRUE</description></item>
            <item><description>VALUE</description></item>
            <item><description>LEN</description></item>
            <item><description>MID</description></item>
            <item><description>ROUND</description></item>
            <item><description>SIGN</description></item>
            <item><description>INT</description></item>
            <item><description>ABS</description></item>
            <item><description>LN</description></item>
            <item><description>EXP</description></item>
            <item><description>SQRT</description></item>
            <item><description>PI</description></item>
            <item><description>COS</description></item>
            <item><description>SIN</description></item>
            <item><description>COLUMN</description></item>
            <item><description>ROW</description></item>
            <item><description>MAX</description></item>
            <item><description>MIN</description></item>
            <item><description>AVERAGE</description></item>
            <item><description>SUM</description></item>
            <item><description>IF</description></item>
            <item><description>COUNT</description></item>
            </list>
            </p>
            <p>
            For more information on formulas, consult Microsoft Excel documentation.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if property get is attempted on a cell range 
            which is not merged.</exception>
            <example>Following code demonstrates how to use formulas and named ranges. It shows next features: 
cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
functions and named cell ranges.
<code lang="Visual Basic">
    ws.Cells("A1").Value = 5
    ws.Cells("A2").Value = 6
    ws.Cells("A3").Value = 10
 
    ws.Cells("C1").Formula = "=A1+A2"
    ws.Cells("C2").Formula = "=$A$1-A3"
    ws.Cells("C3").Formula = "=COUNT(A1:A3)"
    ws.Cells("C4").Formula = "=AVERAGE($A$1:$A$3)"
    ws.Cells("C5").Formula = "=SUM(A1:A3,2,3)"
    ws.Cells("C7").Formula = "= 123 - (-(-(23.5)))"
 
    ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"))
    ws.Cells("C8").Formula = "=MAX(DataRange)"
 
    Dim cr As CellRange = ws.Cells.GetSubrange("B9","C10")
    cr.Merged = True
    cr.Formula = "=A1*25"
</code>
<code lang="C#">	
	ws.Cells["A1"].Value = 5;
	ws.Cells["A2"].Value = 6;
	ws.Cells["A3"].Value = 10;

	ws.Cells["C1"].Formula = "=A1+A2";
	ws.Cells["C2"].Formula = "=$A$1-A3";
	ws.Cells["C3"].Formula = "=COUNT(A1:A3)";
	ws.Cells["C4"].Formula = "=AVERAGE($A$1:$A$3)";
	ws.Cells["C5"].Formula = "=SUM(A1:A3,2,3)";
	ws.Cells["C7"].Formula = "= 123 - (-(-(23.5)))";

	ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"));
	ws.Cells["C8"].Formula = "=MAX(DataRange)";

	CellRange cr = ws.Cells.GetSubrange("B9", "C10");
	cr.Merged = true;
	cr.Formula = "=A1*25";
</code>
</example>
            <seealso cref="M:GemBox.ExcelLite.NamedRangeCollection.Add(System.String,GemBox.ExcelLite.CellRange)">NamedRangeCollection.Add</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Value">
            <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
            <remarks>
            <p>Property set will set value of multiple cells or of a merged range.</p>
            <p>Property get has meaning only if range is <see cref="P:GemBox.ExcelLite.CellRange.Merged">Merged</see>; 
            otherwise, exception is thrown.</p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if property get is attempted on a cell range 
            which is not merged.</exception>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.ExcelLite.CellStyle">CellStyle</see>) on one or more excel cells.
            </summary>
            <remarks>
            <p>Property set will set style of multiple cells or of a merged range.</p>
            <p>Property get has meaning only if range is <see cref="P:GemBox.ExcelLite.CellRange.Merged">Merged</see>; 
            otherwise, exception is thrown.</p>
            <p> Note that for <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property set on a cell range that 
is not merged, you can't use the following format:
<code lang="Visual Basic">
	Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells
	cr.Style.Rotation = 30
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;
	cr.Style.Rotation = 30;
</code>
because that would first call <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property get method and that 
will certainly fail because <see cref="P:GemBox.ExcelLite.CellRange.Style">Style</see> property get is defined only 
for a merged cell range. </p><p>Instead you can use two different code patterns, depending on whether you want to replace or combine the existing 
cell range styles with the new style.</p><p>
If you want to <b>replace</b> cell style on every cell in a cell range use the following code:
<code lang="Visual Basic">
	Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells
	Dim style As CellStyle = New CellStyle()
	style.Rotation = 30
	cr.Style = style
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;
	CellStyle style = new CellStyle();
	style.Rotation = 30;
	cr.Style = style;
</code>
</p><p>
If you want to <b>set</b> cell style property on every cell in a cell range (other cell style property values will 
remain unchanged) use the following code:
<code lang="Visual Basic">
    Dim cell As ExcelCell
    For Each cell In excelFile.Worksheets(0).Rows(1).Cells
        cell.Style.Rotation = 30
    Next
</code>
<code lang="C#">
	foreach(ExcelCell cell in excelFile.Worksheets[0].Rows[1].Cells)
		cell.Style.Rotation = 30;
</code>
</p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if property get is attempted on a cell range 
            which is not merged.</exception>
            <seealso cref="P:GemBox.ExcelLite.CellRange.Merged"/>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.IsStyleDefault">
            <summary>
            Returns <b>true</b> if all cells in cell range or merged range have default 
            cell style; otherwise, <b>false</b>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRange.IndexingMode">
            <summary>
            Gets indexing mode used for cell range.
            </summary>
            <remarks>
            <p>If <see cref="P:GemBox.ExcelLite.CellRange.Height">Height</see> is 1, indexing mode 
            is <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Horizontal">Horizontal</see>.</p>
            <p>Otherwise, if <see cref="P:GemBox.ExcelLite.CellRange.Width">Width</see> is 1, indexing mode 
            is <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Vertical">Vertical</see>.</p>
            <p>Otherwise, indexing mode is <see cref="F:GemBox.ExcelLite.RangeIndexingMode.Rectangular">
            Rectangular</see>.</p>
            </remarks>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
        </member>
        <member name="T:GemBox.ExcelLite.CellRangeEnumerator">
            <summary>
            Enumerator used for iterating cells in a <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.CellRangeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is one column before 
            the first cell in the cell range.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.CellRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the cell range.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if 
            the enumerator has passed the end of the cell range.
            </returns>
        </member>
        <member name="P:GemBox.ExcelLite.CellRangeEnumerator.Parent">
            <summary>
            Parent <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>. 
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRangeEnumerator.CurrentRow">
            <summary>
            Current absolute row index in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRangeEnumerator.CurrentColumn">
            <summary>
            Current absolute column index in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRangeEnumerator.Current">
            <summary>
            Gets the current element in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.CellRangeEnumerator.CurrentCell">
            <summary>
            Gets the current <see cref="T:GemBox.ExcelLite.ExcelCell">ExcelCell</see> in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.MergedCellRange.Formula">
            <summary>
            Gets or sets merged range formula string.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.AreaErr3dFormulaToken">
            <summary>
            Formula token for holding 3d reference error.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.AreaErr3dFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.AreaErr3dFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.AreaErr3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.CellFormula.Recalculate">
            <summary>
            Recalculate formula based on saved tokens.
            It need to be done for changing some data which can be changed after setting formula
            and before saving xls file.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaFunctionInfo">
            <summary>
            Hold information about function( name, code, expected arguments count. )
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FormulaFunctionInfo.VariableArgumentAmountMark">
            <summary>
            Is used to the specify for appropriate functins the variable count of arguments
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.FormulaFunctionInfo.argumentsCount">
            <summary>
            Arguments count value, by default it is initilized with not fixed( variable ) argument count mark.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaFunctionInfo.#ctor(System.UInt16,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaFunctionInfo"/> class.
            </summary>
            <param name="code">The function code.</param>
            <param name="name">The function name.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaFunctionInfo.#ctor(System.UInt16,System.String,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaFunctionInfo"/> class.
            </summary>
            <param name="code">The function code.</param>
            <param name="name">The function name.</param>
            <param name="argumentsCount">The function's arguments count.</param>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionInfo.Code">
            <summary>
            Gets function code.
            </summary>
            <value>The function code.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionInfo.ArgumentsCount">
            <summary>
            Arguments count value, by default it is initilized with not fixed( variable ) argument count mark.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionInfo.Name">
            <summary>
            Gets function name.
            </summary>
            <value>Function name.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionInfo.IsFixedArgumentCount">
            <summary>
            Gets a value indicating whether function has fixed argument count.
            </summary>
            <value>
            	<c>true</c> if this function has fixed argument count; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaTokenType">
            <summary>
            The set of predefined formula token types
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaTokenClass">
            <summary>
            The set of predefined formula token classes
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaTokenCode">
            <summary>
            The set of predefined formula token codes
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.RangeIndexingMode">
            <summary>
            Indexing modes used by <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see>.
            </summary>
            <example> Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how 
indexing works different in different context. <see cref="M:GemBox.ExcelLite.CellRange.SetBorders(GemBox.ExcelLite.MultipleBorders,System.Drawing.Color,GemBox.ExcelLite.LineStyle)">SetBorders</see> 
method is used to mark outside borders of the rectangular range.
<code lang="Visual Basic">
    Dim cr As CellRange = excelFile.Worksheets(0).Rows(1).Cells

    cr(0).Value = cr.IndexingMode
    cr(3).Value = "D2"
    cr("B").Value = "B2"

    cr = excelFile.Worksheets(0).Columns(4).Cells

    cr(0).Value = cr.IndexingMode
    cr(2).Value = "E3"
    cr("5").Value = "E5"

    cr = excelFile.Worksheets(0).Cells.GetSubrange("F2", "J8")
    cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed)

    cr("I7").Value = cr.IndexingMode
    cr(0, 0).Value = "F2"
    cr("G3").Value = "G3"
    cr(5).Value = "F3" <font color="Green">' Cell range width is 5 (F G H I J).</font>
</code>
<code lang="C#">
	CellRange cr = excelFile.Worksheets[0].Rows[1].Cells;				

	cr[0].Value = cr.IndexingMode;
	cr[3].Value = "D2";
	cr["B"].Value = "B2";

	cr = excelFile.Worksheets[0].Columns[4].Cells;

	cr[0].Value = cr.IndexingMode;
	cr[2].Value = "E3";
	cr["5"].Value = "E5";

	cr = excelFile.Worksheets[0].Cells.GetSubrange("F2", "J8");
	cr.SetBorders(MultipleBorders.Outside, Color.Navy, LineStyle.Dashed);

	cr["I7"].Value = cr.IndexingMode;
	cr[0,0].Value = "F2";
	cr["G3"].Value = "G3";
	cr[5].Value = "F3"; <font color="Green">// Cell range width is 5 (F G H I J).</font>
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.CellRange.IndexingMode"/>
        </member>
        <member name="F:GemBox.ExcelLite.RangeIndexingMode.Rectangular">
            <summary>
            Rectangular indexing mode. Rectangular cell range is higher than one row and wider than one column.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RangeIndexingMode.Horizontal">
            <summary>
            Horizontal indexing mode. Horizontal cell range has 
            <see cref="P:GemBox.ExcelLite.CellRange.Height">CellRange.Height</see> equal to 1.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.RangeIndexingMode.Vertical">
            <summary>
            Vertical indexing mode. Vertical cell range has 
            <see cref="P:GemBox.ExcelLite.CellRange.Width">CellRange.Width</see> equal to 1.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ShowFormulas">
            <summary>
            If set, MS Excel shows formulas. Otherwise, formula results are shown.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ShowGridLines">
            <summary>
            If set, MS Excel shows grid lines.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ShowSheetHeaders">
            <summary>
            If set, MS Excel shows row and column headers.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.FrozenPanes">
            <summary>
            If set, panes are frozen in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ShowZeroValues">
            <summary>
            If set, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.DefaultGridLineColor">
            <summary>
            If set, MS Excel uses default grid line color.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ColumnsFromRightToLeft">
            <summary>
            If set, MS Excel shows columns from right to left.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ShowOutlineSymbols">
            <summary>
            If set, MS Excel shows outline symbols.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.FrozenNoSplit">
            <summary>
            If set, MS Excel removes splits if pane freeze is removed.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.SheetSelected">
            <summary>
            Set if sheet is selected in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.SheetVisible">
            <summary>
            Set if sheet is visible in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.WorksheetWindowOptions.ShowInPageBreakPreview">
            <summary>
            If set, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.NumFormulaToken">
            <summary>
            Formula token for holding integer.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NumFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NumFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NumFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NumFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.NumFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.NumFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.IntFormulaToken">
            <summary>
            Formula token for holding integer.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.IntFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.IntFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.IntFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.IntFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.IntFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to bytes representation.
            </summary>
            <returns>bytes representation of the formula token</returns>
        </member>
        <member name="M:GemBox.ExcelLite.IntFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.FunctionVarFormulaToken">
            <summary>
            Formula token for holding function with variable arguments count.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionVarFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FunctionVarFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionVarFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionVarFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionVarFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.ExcelLite.FunctionVarFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaFunctionsTable">
            <summary>
            Hold information about all supported functions.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaFunctionsTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaFunctionsTable"/> class.
            Constructor is private to allow only creation of FormulaFunctionsTable instances only once.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaFunctionsTable.IsFunction(System.String)">
            <summary>
            Determines whether the specified name is function.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the specified name is function; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionsTable.Instance">
            <summary>
            Gets the static FormulaFunctionsTable instance. Used to be shared between FormulaFunctionsTable' users.
            </summary>
            <value>The singleton FormulaFunctionTable instance.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionsTable.Item(System.UInt16)">
            <summary>
            Gets the <see cref="T:GemBox.ExcelLite.FormulaFunctionInfo"/> at the specified index.
            </summary>
            <value><see cref="T:GemBox.ExcelLite.FormulaFunctionInfo"/> instance</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionsTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.ExcelLite.FormulaFunctionInfo"/> at the specified index.
            </summary>
            <value><see cref="T:GemBox.ExcelLite.FormulaFunctionInfo"/> instance</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaFunctionsTable.Names">
            <summary>
            Gets the names of predefined Excel functions.
            </summary>
            <value>The names of prdefined Excel function.</value>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelWorksheet">
            <summary>
            Excel worksheet is a table with additional properties, identified by a unique name.
            </summary>
            <remarks>
            <p>
            Worksheet in Microsoft Excel has limited size. 
            Number of rows (<see cref="T:GemBox.ExcelLite.ExcelRow">ExcelRow</see>) is limited 
            to <see cref="F:GemBox.ExcelLite.ExcelFile.MaxRows">ExcelFile.MaxRows</see>. 
            Number of columns (<see cref="T:GemBox.ExcelLite.ExcelColumn">ExcelColumn</see>) is limited 
            to <see cref="F:GemBox.ExcelLite.ExcelFile.MaxColumns">ExcelFile.MaxColumns</see>. 
            A specific cell (<see cref="T:GemBox.ExcelLite.ExcelCell">ExcelCell</see>) can be accessed either trough 
            <see cref="P:GemBox.ExcelLite.ExcelRow.Cells">ExcelRow.Cells</see>, 
            <see cref="P:GemBox.ExcelLite.ExcelColumn.Cells">ExcelColumn.Cells</see> or 
            <see cref="P:GemBox.ExcelLite.ExcelWorksheet.Cells">ExcelWorksheet.Cells</see> property. 
            Whichever property used, there are two distinct methods of getting a cell reference; using <b>name</b>
            and using <b>index</b>. For example, full name of cell in top left corner of a worksheet is "A1". Translated
            to indexes, same cell would be 0,0 (zero row and zero column). If using 
            <see cref="P:GemBox.ExcelLite.ExcelRow.Cells">ExcelRow.Cells</see> or 
            <see cref="P:GemBox.ExcelLite.ExcelColumn.Cells">ExcelColumn.Cells</see> to access a
            specific cell, only partial name or partial index must be used, providing unknown column or row information. 
            </p>
            </remarks>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
            <seealso cref="T:GemBox.ExcelLite.ExcelRow"/>
            <seealso cref="T:GemBox.ExcelLite.ExcelColumn"/>
            <seealso cref="T:GemBox.ExcelLite.ExcelCell"/>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelWorksheet.Delete">
            <summary>
            Deletes this worksheet from the workbook.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelWorksheet.InsertEmpty(System.String)">
            <summary>
            Inserts an empty worksheet before the current worksheet.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelWorksheet.InsertCopy(System.String,GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Inserts a copy of an existing worksheet before the current worksheet.
            </summary>
            <param name="destinationWorksheetName">Name of the new worksheet.</param>
            <param name="sourceWorksheet">Source worksheet.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.NamedRanges">
            <summary>
            Gets <seealso cref="T:GemBox.ExcelLite.NamedRangeCollection">NamedRangeCollection</seealso> 
            containing descriptive names which are used to represent cells, ranges of cells, 
            formulas, or constant values.
            </summary>		
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>Following code demonstrates how to use formulas and named ranges. It shows next features: 
cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
functions and named cell ranges.
<code lang="Visual Basic">
    ws.Cells("A1").Value = 5
    ws.Cells("A2").Value = 6
    ws.Cells("A3").Value = 10
 
    ws.Cells("C1").Formula = "=A1+A2"
    ws.Cells("C2").Formula = "=$A$1-A3"
    ws.Cells("C3").Formula = "=COUNT(A1:A3)"
    ws.Cells("C4").Formula = "=AVERAGE($A$1:$A$3)"
    ws.Cells("C5").Formula = "=SUM(A1:A3,2,3)"
    ws.Cells("C7").Formula = "= 123 - (-(-(23.5)))"
 
    ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"))
    ws.Cells("C8").Formula = "=MAX(DataRange)"
 
    Dim cr As CellRange = ws.Cells.GetSubrange("B9","C10")
    cr.Merged = True
    cr.Formula = "=A1*25"
</code>
<code lang="C#">	
	ws.Cells["A1"].Value = 5;
	ws.Cells["A2"].Value = 6;
	ws.Cells["A3"].Value = 10;

	ws.Cells["C1"].Formula = "=A1+A2";
	ws.Cells["C2"].Formula = "=$A$1-A3";
	ws.Cells["C3"].Formula = "=COUNT(A1:A3)";
	ws.Cells["C4"].Formula = "=AVERAGE($A$1:$A$3)";
	ws.Cells["C5"].Formula = "=SUM(A1:A3,2,3)";
	ws.Cells["C7"].Formula = "= 123 - (-(-(23.5)))";

	ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"));
	ws.Cells["C8"].Formula = "=MAX(DataRange)";

	CellRange cr = ws.Cells.GetSubrange("B9", "C10");
	cr.Merged = true;
	cr.Formula = "=A1*25";
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.AutomaticPageBreakScalingFactor">
            <summary>
            Scaling factor for automatic page breaks.
            </summary>
            <remarks>
            <p>Unit is one percent. Value must be between 10 and 400.</p>
            <p>Default value for this property is 255.</p>
            <p>MS Excel inserts automatic page breaks depending on this scaling factor. 
            Smaller it gets, bigger will be the distance between the two automatic page breaks.</p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.Name">
            <summary>
            Gets or sets worksheet name. 
            </summary>
            <remarks>
            If not unique (worksheet with that name already exists in 
            <see cref="P:GemBox.ExcelLite.ExcelFile.Worksheets">ExcelFile.Worksheets</see> collection) exception is thrown.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if worksheet name is not unique.</exception>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.Rows">
            <summary>
            Gets collection of all rows (<see cref="T:GemBox.ExcelLite.ExcelRow">ExcelRow</see>) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.Columns">
            <summary>
            Gets collection of all columns (<see cref="T:GemBox.ExcelLite.ExcelColumn">ExcelColumn</see>) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.Cells">
            <summary>
            Gets <see cref="T:GemBox.ExcelLite.CellRange">CellRange</see> with all the cells 
            (<see cref="T:GemBox.ExcelLite.ExcelCell">ExcelCell</see>) 
            in the worksheet.
            </summary>
            <example> Look at following code for cell referencing examples:
<code lang="Visual Basic">
	Dim ws As ExcelWorksheet = excelFile.Worksheets.ActiveWorksheet

	ws.Cells("B2").Value = "Cell B2."
	ws.Cells(6, 0).Value = "Cell in row 7 and column A."

	ws.Rows(2).Cells(0).Value = "Cell in row 3 and column A."
	ws.Rows("4").Cells("B").Value = "Cell in row 4 and column B."

	ws.Columns(2).Cells(4).Value = "Cell in column C and row 5."
	ws.Columns("AA").Cells("6").Value = "Cell in AA column and row 6."
</code>
<code lang="C#">
	ExcelWorksheet ws = excelFile.Worksheets.ActiveWorksheet;

	ws.Cells["B2"].Value = "Cell B2.";
	ws.Cells[6,0].Value = "Cell in row 7 and column A.";

	ws.Rows[2].Cells[0].Value = "Cell in row 3 and column A.";
	ws.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B.";

	ws.Columns[2].Cells[4].Value = "Cell in column C and row 5.";
	ws.Columns["AA"].Cells["6"].Value = "Cell in AA column and row 6.";
</code>
</example>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.Protected">
            <summary>
            Gets or sets the worksheet protection flag.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelFile.Protected">ExcelFile.Protected</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.OutlineRowButtonsBelow">
            <summary>
            Gets or sets whether outline row buttons are displayed below groups.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <example> Following code creates two horizontal groups and one vertical group. Horizontal groups have 
outline button above (default is below), while vertical group is collapsed.
<code lang="Visual Basic">
    Sub GroupingSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Grouping and outline example:"

        <font color="Green">' Vertical grouping.</font>
        ws.Cells(2, 0).Value = "GroupA Start"
        ws.Rows(2).OutlineLevel = 1
        ws.Cells(3, 0).Value = "A"
        ws.Rows(3).OutlineLevel = 1
        ws.Cells(4, 1).Value = "GroupB Start"
        ws.Rows(4).OutlineLevel = 2
        ws.Cells(5, 1).Value = "B"
        ws.Rows(5).OutlineLevel = 2
        ws.Cells(6, 1).Value = "GroupB End"
        ws.Rows(6).OutlineLevel = 2
        ws.Cells(7, 0).Value = "GroupA End"
        ws.Rows(7).OutlineLevel = 1
        <font color="Green">' Put outline row buttons above groups.</font>
        ws.OutlineRowButtonsBelow = False

        <font color="Green">' Horizontal grouping (collapsed).</font>
        ws.Cells("E2").Value = "Gr.C Start"
        ws.Columns("E").OutlineLevel = 1
        ws.Columns("E").Collapsed = True
        ws.Cells("F2").Value = "C"
        ws.Columns("F").OutlineLevel = 1
        ws.Columns("F").Collapsed = True
        ws.Cells("G2").Value = "Gr.C End"
        ws.Columns("G").OutlineLevel = 1
        ws.Columns("G").Collapsed = True
    End Sub
</code>
<code lang="C#">
	static void GroupingSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Grouping and outline example:";

		<font color="Green">// Vertical grouping.</font>
		ws.Cells[2,0].Value = "GroupA Start";
		ws.Rows[2].OutlineLevel = 1;
		ws.Cells[3,0].Value = "A";
		ws.Rows[3].OutlineLevel = 1;
		ws.Cells[4,1].Value = "GroupB Start";
		ws.Rows[4].OutlineLevel = 2;
		ws.Cells[5,1].Value = "B";
		ws.Rows[5].OutlineLevel = 2;
		ws.Cells[6,1].Value = "GroupB End";
		ws.Rows[6].OutlineLevel = 2;
		ws.Cells[7,0].Value = "GroupA End";
		ws.Rows[7].OutlineLevel = 1;
		<font color="Green">// Put outline row buttons above groups.</font>
		ws.OutlineRowButtonsBelow = false;

		<font color="Green">// Horizontal grouping (collapsed).</font>
		ws.Cells["E2"].Value = "Gr.C Start";
		ws.Columns["E"].OutlineLevel = 1;
		ws.Columns["E"].Collapsed = true;
		ws.Cells["F2"].Value = "C";
		ws.Columns["F"].OutlineLevel = 1;
		ws.Columns["F"].Collapsed = true;
		ws.Cells["G2"].Value = "Gr.C End";
		ws.Columns["G"].OutlineLevel = 1;
		ws.Columns["G"].Collapsed = true;
	}
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelWorksheet.OutlineColumnButtonsRight">ExcelWorksheet.OutlineColumnButtonsRight</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumnRowBase.Collapsed"/>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumnRowBase.OutlineLevel"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.OutlineColumnButtonsRight">
            <summary>
            Gets or sets whether outline column buttons are displayed on the right side of groups.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <example> Following code creates two horizontal groups and one vertical group. Horizontal groups have 
outline button above (default is below), while vertical group is collapsed.
<code lang="Visual Basic">
    Sub GroupingSample(ByVal ws As ExcelWorksheet)
        ws.Cells(0, 0).Value = "Grouping and outline example:"

        <font color="Green">' Vertical grouping.</font>
        ws.Cells(2, 0).Value = "GroupA Start"
        ws.Rows(2).OutlineLevel = 1
        ws.Cells(3, 0).Value = "A"
        ws.Rows(3).OutlineLevel = 1
        ws.Cells(4, 1).Value = "GroupB Start"
        ws.Rows(4).OutlineLevel = 2
        ws.Cells(5, 1).Value = "B"
        ws.Rows(5).OutlineLevel = 2
        ws.Cells(6, 1).Value = "GroupB End"
        ws.Rows(6).OutlineLevel = 2
        ws.Cells(7, 0).Value = "GroupA End"
        ws.Rows(7).OutlineLevel = 1
        <font color="Green">' Put outline row buttons above groups.</font>
        ws.OutlineRowButtonsBelow = False

        <font color="Green">' Horizontal grouping (collapsed).</font>
        ws.Cells("E2").Value = "Gr.C Start"
        ws.Columns("E").OutlineLevel = 1
        ws.Columns("E").Collapsed = True
        ws.Cells("F2").Value = "C"
        ws.Columns("F").OutlineLevel = 1
        ws.Columns("F").Collapsed = True
        ws.Cells("G2").Value = "Gr.C End"
        ws.Columns("G").OutlineLevel = 1
        ws.Columns("G").Collapsed = True
    End Sub
</code>
<code lang="C#">
	static void GroupingSample(ExcelWorksheet ws)
	{
		ws.Cells[0,0].Value = "Grouping and outline example:";

		<font color="Green">// Vertical grouping.</font>
		ws.Cells[2,0].Value = "GroupA Start";
		ws.Rows[2].OutlineLevel = 1;
		ws.Cells[3,0].Value = "A";
		ws.Rows[3].OutlineLevel = 1;
		ws.Cells[4,1].Value = "GroupB Start";
		ws.Rows[4].OutlineLevel = 2;
		ws.Cells[5,1].Value = "B";
		ws.Rows[5].OutlineLevel = 2;
		ws.Cells[6,1].Value = "GroupB End";
		ws.Rows[6].OutlineLevel = 2;
		ws.Cells[7,0].Value = "GroupA End";
		ws.Rows[7].OutlineLevel = 1;
		<font color="Green">// Put outline row buttons above groups.</font>
		ws.OutlineRowButtonsBelow = false;

		<font color="Green">// Horizontal grouping (collapsed).</font>
		ws.Cells["E2"].Value = "Gr.C Start";
		ws.Columns["E"].OutlineLevel = 1;
		ws.Columns["E"].Collapsed = true;
		ws.Cells["F2"].Value = "C";
		ws.Columns["F"].OutlineLevel = 1;
		ws.Columns["F"].Collapsed = true;
		ws.Cells["G2"].Value = "Gr.C End";
		ws.Columns["G"].OutlineLevel = 1;
		ws.Columns["G"].Collapsed = true;
	}
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelWorksheet.OutlineRowButtonsBelow">ExcelWorksheet.OutlineRowButtonsBelow</seealso>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumnRowBase.Collapsed"/>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumnRowBase.OutlineLevel"/>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.DefaultColumnWidth">
            <summary>
            Gets or sets default column width.
            </summary>
            <remarks>
            Unit is 1/256th of the width of the zero character in default font. This value is used as width for columns 
            which don't have <see cref="P:GemBox.ExcelLite.ExcelColumn.Width">ExcelColumn.Width</see> property explicitly set.
            </remarks>
            <seealso cref="P:GemBox.ExcelLite.ExcelColumn.Width">ExcelColumn.Width</seealso>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.HorizontalPageBreaks">
            <summary>
            Gets collection of all horizontal page breaks 
            (<see cref="T:GemBox.ExcelLite.HorizontalPageBreak">HorizontalPageBreak</see>) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.VerticalPageBreaks">
            <summary>
            Gets collection of all vertical page breaks 
            (<see cref="T:GemBox.ExcelLite.VerticalPageBreak">VerticalPageBreak</see>) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.FirstVisibleRow">
            <summary>
            Index of the first visible row in the worksheet.
            </summary>
            <remarks>
            Default value for this property is 0.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.FirstVisibleColumn">
            <summary>
            Index of the first visible column in the worksheet.
            </summary>
            <remarks>
            Default value for this property is 0.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.Zoom">
            <summary>
            Magnification factor in normal view.
            </summary>
            <remarks>
            <p>Unit is one percent. Value must be between 10 and 400.</p>
            <p>Default value for this property is 100.</p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.PageBreakViewZoom">
            <summary>
            Magnification factor in page break view.
            </summary>
            <remarks>
            <p>Unit is one percent. Value must be between 10 and 400.</p>
            <p>Default value for this property is 60.</p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowFormulas">
            <summary>
            If true, MS Excel shows formulas. Otherwise, formula results are shown. 
            </summary>
            <remarks>
            Default value for this property is <b>false</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowGridLines">
            <summary>
            If true, MS Excel shows grid lines.
            </summary>
            <remarks>
            Default value for this property is <b>true</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowSheetHeaders">
            <summary>
            If true, MS Excel shows row and column headers.
            </summary>
            <remarks>
            Default value for this property is <b>true</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowZeroValues">
            <summary>
            If true, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
            <remarks>
            Default value for this property is <b>true</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowColumnsFromRightToLeft">
            <summary>
            If true, MS Excel shows columns from right to left.
            </summary>
            <remarks>
            Default value for this property is <b>false</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowOutlineSymbols">
            <summary>
            If true, MS Excel shows outline symbols.
            </summary>
            <remarks>
            Default value for this property is <b>true</b>.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheet.ShowInPageBreakPreview">
            <summary>
            If true, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
            <remarks>
            Default value for this property is <b>false</b>.
            </remarks>
        </member>
        <member name="T:GemBox.ExcelLite.ExcelWorksheetCollection">
            <summary>
            Collection of worksheets (<see cref="T:GemBox.ExcelLite.ExcelWorksheet">ExcelWorksheet</see>).
            </summary>
            <seealso cref="T:GemBox.ExcelLite.ExcelWorksheet"/>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelWorksheetCollection.Add(System.String)">
            <summary>
            Adds an empty worksheet to the end of the collection.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.ExcelLite.ExcelWorksheetCollection.ActiveWorksheet">ActiveWorksheet</see> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelWorksheetCollection.AddCopy(System.String,GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Adds a copy of an existing worksheet to the end of the collection.
            </summary>
            <param name="destinationWorksheetName">Name of new worksheet.</param>
            <param name="sourceWorksheet">Source worksheet.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.ExcelLite.ExcelWorksheetCollection.ActiveWorksheet">ActiveWorksheet</see> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.ExcelLite.ExcelWorksheetCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.ExcelLite.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheetCollection.SheetNames">
            <summary>
            Gets the sheet names.
            </summary>
            <value>The sheet names.</value>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheetCollection.SheetIndexes">
            <summary>
            Gets the sheet indexes.
            </summary>
            <value>The sheet indexes.</value>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheetCollection.Item(System.Int32)">
            <overloads>Gets the worksheet with the specified index or name.</overloads>
            <summary>
            Gets the worksheet with the specified index.
            </summary>
            <param name="index">The zero-based index of the worksheet.</param>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheetCollection.Item(System.String)">
            <summary>
            Gets the worksheet with the specified name.
            </summary>
            <param name="name">The name of the worksheet.</param>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheetCollection.ActiveWorksheet">
            <summary>
            Gets or sets active worksheet.
            </summary>
            <remarks>
            Active worksheet is the one selected when file is opened with Microsoft Excel. By default active worksheet 
            is the first one added with <see cref="M:GemBox.ExcelLite.ExcelWorksheetCollection.Add(System.String)">Add</see> method.
            </remarks>
        </member>
        <member name="P:GemBox.ExcelLite.ExcelWorksheetCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:GemBox.ExcelLite.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
        </member>
        <member name="T:GemBox.ExcelLite.NamedRangeCollection">
            <summary>
            Collection of the descriptive names which are used 
            to represent cells, ranges of cells, formulas, or constant values.
            </summary>		
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>Following code demonstrates how to use formulas and named ranges. It shows next features: 
cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
functions and named cell ranges.
<code lang="Visual Basic">
    ws.Cells("A1").Value = 5
    ws.Cells("A2").Value = 6
    ws.Cells("A3").Value = 10
 
    ws.Cells("C1").Formula = "=A1+A2"
    ws.Cells("C2").Formula = "=$A$1-A3"
    ws.Cells("C3").Formula = "=COUNT(A1:A3)"
    ws.Cells("C4").Formula = "=AVERAGE($A$1:$A$3)"
    ws.Cells("C5").Formula = "=SUM(A1:A3,2,3)"
    ws.Cells("C7").Formula = "= 123 - (-(-(23.5)))"
 
    ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"))
    ws.Cells("C8").Formula = "=MAX(DataRange)"
 
    Dim cr As CellRange = ws.Cells.GetSubrange("B9","C10")
    cr.Merged = True
    cr.Formula = "=A1*25"
</code>
<code lang="C#">	
	ws.Cells["A1"].Value = 5;
	ws.Cells["A2"].Value = 6;
	ws.Cells["A3"].Value = 10;

	ws.Cells["C1"].Formula = "=A1+A2";
	ws.Cells["C2"].Formula = "=$A$1-A3";
	ws.Cells["C3"].Formula = "=COUNT(A1:A3)";
	ws.Cells["C4"].Formula = "=AVERAGE($A$1:$A$3)";
	ws.Cells["C5"].Formula = "=SUM(A1:A3,2,3)";
	ws.Cells["C7"].Formula = "= 123 - (-(-(23.5)))";

	ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"));
	ws.Cells["C8"].Formula = "=MAX(DataRange)";

	CellRange cr = ws.Cells.GetSubrange("B9", "C10");
	cr.Merged = true;
	cr.Formula = "=A1*25";
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="F:GemBox.ExcelLite.NamedRangeCollection.namesList">
            <summary>
            The user-defined names list.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRangeCollection.#ctor(GemBox.ExcelLite.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NamedRangeCollection"/> class.
            </summary>
            <param name="worksheet">The worksheet to initialize NamedRangesCollection.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRangeCollection.#ctor(GemBox.ExcelLite.ExcelWorksheet,GemBox.ExcelLite.NamedRangeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NamedRangeCollection">NamedRangeCollection</see> class.
            </summary>
            <param name="worksheet">The worksheet to initialize NamedRangesCollection.</param>
            <param name="sourceNamedRanges">The source named range collection to initialize NamedRangesCollection.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRangeCollection.Add(System.String,GemBox.ExcelLite.CellRange)">
            <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells, 
            formulas or constant values.
            </summary>
            <param name="name">The user-defined name.</param>
            <param name="range">The range to be refered by name.</param>
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>Following code demonstrates how to use formulas and named ranges. It shows next features: 
cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
functions and named cell ranges.
<code lang="Visual Basic">
    ws.Cells("A1").Value = 5
    ws.Cells("A2").Value = 6
    ws.Cells("A3").Value = 10
 
    ws.Cells("C1").Formula = "=A1+A2"
    ws.Cells("C2").Formula = "=$A$1-A3"
    ws.Cells("C3").Formula = "=COUNT(A1:A3)"
    ws.Cells("C4").Formula = "=AVERAGE($A$1:$A$3)"
    ws.Cells("C5").Formula = "=SUM(A1:A3,2,3)"
    ws.Cells("C7").Formula = "= 123 - (-(-(23.5)))"
 
    ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"))
    ws.Cells("C8").Formula = "=MAX(DataRange)"
 
    Dim cr As CellRange = ws.Cells.GetSubrange("B9","C10")
    cr.Merged = True
    cr.Formula = "=A1*25"
</code>
<code lang="C#">	
	ws.Cells["A1"].Value = 5;
	ws.Cells["A2"].Value = 6;
	ws.Cells["A3"].Value = 10;

	ws.Cells["C1"].Formula = "=A1+A2";
	ws.Cells["C2"].Formula = "=$A$1-A3";
	ws.Cells["C3"].Formula = "=COUNT(A1:A3)";
	ws.Cells["C4"].Formula = "=AVERAGE($A$1:$A$3)";
	ws.Cells["C5"].Formula = "=SUM(A1:A3,2,3)";
	ws.Cells["C7"].Formula = "= 123 - (-(-(23.5)))";

	ws.NamedRanges.Add("DataRange", ws.Cells.GetSubrange("A1", "A3"));
	ws.Cells["C8"].Formula = "=MAX(DataRange)";

	CellRange cr = ws.Cells.GetSubrange("B9", "C10");
	cr.Merged = true;
	cr.Formula = "=A1*25";
</code>
</example>
            <seealso cref="P:GemBox.ExcelLite.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRangeCollection.DeleteInternal(System.Int32)">
            <summary>
            Deletes named range at specified index.
            </summary>
            <param name="index">The specified index.</param>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRangeCollection.Names">
            <summary>
            Gets the user-defined names. You can use these names as shortcuts for ranges, cells, etc.
            </summary>
            <value>The user-defined names.</value>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRangeCollection.Count">
            <summary>
            Gets the number of named ranges contained in the collection.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRangeCollection.NamedRanges">
            <summary>
            Gets or sets the named cell name list
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRangeCollection.NamesList">
            <summary>
            Gets or sets the user-defined names list.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRangeCollection.Item(System.Int32)">
            <overloads>Gets the <see cref="T:GemBox.ExcelLite.NamedRange">NamedRange</see> with 
            the specified index or name.</overloads>
            <summary>
            Gets the <see cref="T:GemBox.ExcelLite.NamedRange">NamedRange</see> at the specified index.
            </summary>
            <param name="index">Range index.</param>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRangeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.ExcelLite.NamedRange">NamedRange</see> with the specified name.
            </summary>
            <param name="name">Range name.</param>
        </member>
        <member name="T:GemBox.ExcelLite.NamedRange">
            <summary>
            Represents a named range in the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRange.#ctor(GemBox.ExcelLite.NamedRangeCollection,System.Int32,System.String,GemBox.ExcelLite.CellRange)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.NamedRange"/> class.
            </summary>
            <param name="parent">Parent collection.</param>
            <param name="index">Index in the parrent collection.</param>
            <param name="name">The cell range name.</param>
            <param name="range">The named cell range.</param>
        </member>
        <member name="M:GemBox.ExcelLite.NamedRange.Delete">
            <summary>
            Deletes this named range from the named ranges collection.
            </summary>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRange.Range">
            <summary>
            Gets the named cell range.
            </summary>
            <value>The named cell range.</value>
        </member>
        <member name="P:GemBox.ExcelLite.NamedRange.Name">
            <summary>
            Gets the named range name.
            </summary>
            <value>The named range name.</value>
        </member>
        <member name="T:GemBox.ExcelLite.UnaryOperatorFormulaToken">
            <summary>
            Formula token for holding unary operator.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.UnaryOperatorFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.ExcelLite.UnaryOperatorFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.UnaryOperatorFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.UnaryOperatorFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.UnaryOperatorFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.RefErrFormulaToken">
            <summary>
            Formula token for holding reference error.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.RefErrFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.RefErrFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.RefErrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.BinaryOperatorFormulaToken">
            <summary>
            Formula token for holding binary operator.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.BinaryOperatorFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.ExcelLite.BinaryOperatorFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.BinaryOperatorFormulaToken.#ctor(GemBox.ExcelLite.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.BinaryOperatorFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.ExcelLite.BinaryOperatorFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.ExcelLite.Buffer">
            <summary>
            Buffer class is used as the wrapper aroung input string for FormulaParser providing
            additional helpful methods for accessing string buffer.
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Buffer.Empty">
            <summary>
            Unique char to identify that char is empty
            </summary>
        </member>
        <member name="F:GemBox.ExcelLite.Buffer.EmptyInteger">
            <summary>
            Unique integer to identify that integer is null
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.Buffer"/> class.
            </summary>
            <param name="data">The string data to wrap.</param>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.SkipWhitespaces">
            <summary>
            Skips the whitespaces.
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetCurrent">
            <summary>
            Gets the current ñhar data.
            </summary>
            <returns>current char data</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextOnDemand(System.Char)">
            <summary>
            Gets the next on demand( if next symbol is peek, than read it and return back ).
            </summary>
            <param name="peek">The char to peek for.</param>
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextOnDemand(System.Char,System.Boolean)">
            <summary>
            Gets the next on demand( if next symbol is peek, than read it and return back ).
            Additionally it can skip whitespaces on demand.
            </summary>
            <param name="peek">The char to peek for.</param>
            <param name="skipWhitespaces">if set to <c>true</c> [skip whitespaces].</param>
            <returns>
            read char or special char indicating no read status
            </returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextOnDemand(System.Char[])">
            <summary>
            Gets the next on demand( if next symbol is of the given chars, than read it and return back ).
            </summary>
            <param name="charsToPeekFor">The char array to peek for.</param>
            <returns>
            read char or special char indicating no read status
            </returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextWithWhitespaceSkippling">
            <summary>
            Gets the next on demand( if next symbol is peek, than read it and return back ).
            Additionally it always skip whitespaces.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNext">
            <summary>
            Gets the next char from buffer.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.Peek">
            <summary>
            Peeks for the next char.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.Peek(System.Int32)">
            <summary>
            Peeks for the next char at specified forward-position
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextString(System.Char)">
            <summary>
            Gets the next string from buffer.
            </summary>
            <param name="endChar">The char used as end mark during reading.</param>
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextString(System.Char[])">
            <summary>
            Gets the next string from buffer.
            </summary>
            <param name="endChars">The arrag of chars used as end marks during reading.</param>
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextString">
            <summary>
            Gets the next string from buffer with skipping whitespaces.
            </summary>		
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.ExcelLite.Buffer.GetNextString(System.Boolean)">
            <summary>
            Gets the next string from buffer with optional skipping whitespaces.
            </summary>		
            <returns>read string</returns>
        </member>
        <member name="P:GemBox.ExcelLite.Buffer.Data">
            <summary>
            Gets the input data string buffer.
            </summary>
            <value>The input data string buffer.</value>
        </member>
        <member name="P:GemBox.ExcelLite.Buffer.Pos">
            <summary>
            Gets the position of input data string buffer.
            </summary>
            <value>The position of input data string buffer.</value>
        </member>
        <member name="P:GemBox.ExcelLite.Buffer.IsEOF">
            <summary>
            Gets a value indicating whether we have reached end of input buffer.
            </summary>
            <value><c>true</c> if we have reached end of input buffer; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:GemBox.ExcelLite.FormulaTokenTypeEx">
            <summary>
            It is wrapper arodung FormulaTokenType enum to provide high-level bool methods
            </summary>
        </member>
        <member name="M:GemBox.ExcelLite.FormulaTokenTypeEx.#ctor(GemBox.ExcelLite.FormulaTokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.ExcelLite.FormulaTokenTypeEx"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaTokenTypeEx.Type">
            <summary>
            Gets the formula token type.
            </summary>
            <value>The formula token type.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaTokenTypeEx.IsBinary">
            <summary>
            Gets a value indicating whether this instance is binary.
            </summary>
            <value><c>true</c> if this instance is binary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaTokenTypeEx.IsUnary">
            <summary>
            Gets a value indicating whether this instance is unary.
            </summary>
            <value><c>true</c> if this instance is unary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaTokenTypeEx.IsOperand">
            <summary>
            Gets a value indicating whether this instance is operand.
            </summary>
            <value>
            	<c>true</c> if this instance is operand; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaTokenTypeEx.IsFunction">
            <summary>
            Gets a value indicating whether this instance is function.
            </summary>
            <value>
            	<c>true</c> if this instance is function; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.ExcelLite.FormulaTokenTypeEx.IsControl">
            <summary>
            Gets a value indicating whether this instance is control.
            </summary>
            <value>
            	<c>true</c> if this instance is control; otherwise, <c>false</c>.
            </value>
        </member>
    </members>
</doc>
